---
title: "Two-Profile Common and Unique Latent Transition Analysis"
author: Ivan Jacob Agaloos Pesigan
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Two-Profile Common and Unique Latent Transition Analysis}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r}
#| include = FALSE
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r}
#| include = FALSE
root <- rprojroot::is_rstudio_project
data_raw <- root$find_file(
  ".setup",
  "data-raw"
)
if (!dir.exists(data_raw)) {
  dir.create(data_raw, recursive = TRUE)
}
```

```{r}
library(manCULTA)
```

```{r}
#| echo = FALSE
# complete list of R function arguments

# random seed for reproducibility
set.seed(42)

# dimensions
n <- 10000 # number of individuals
m <- 6    # measurement occasions
p <- 4    # number of items
q <- 1    # common trait dimension

# covariate parameters
mu_x <- 11.4009
sigma_x <- 24.67566

# profile membership and transition parameters
nu_0 <- -3.563
kappa_0 <- 0.122
alpha_0 <- -3.586
beta_00 <- 2.250
gamma_00 <- 0.063
gamma_10 <- 0.094

# trait parameters
psi_t <- 0.10 * diag(1)
mu_t <- 0
psi_p <- diag(p)
psi_p_1 <- 0.10
psi_p_2 <- 0.10
psi_p_3 <- 0.50
psi_p_4 <- 0.50
diag(psi_p) <- c(
  psi_p_1,
  psi_p_2,
  psi_p_3,
  psi_p_4
)
mu_p <- rep(x = 0, times = p)
common_trait_loading <- matrix(
  data = 1,
  nrow = p,
  ncol = q
)

# state parameters
common_state_loading <- matrix(
  data = 1,
  nrow = p,
  ncol = 1
)
phi_0 <- 0.000
phi_1 <- 0.311
psi_s0 <- 1.00
psi_s <- 0.25
theta <- 0.15 * diag(p)

# profile-specific means
mu_profile <- cbind(
  c(2.253, 1.493, 1.574, 1.117),
  c(-0.278, -0.165, -0.199, -0.148)
)

# parameters
parameters <- c(
  mu_profile[, 1],
  common_trait_loading[2, 1],
  common_state_loading[2, 1],
  common_trait_loading[3, 1],
  common_state_loading[3, 1],
  common_trait_loading[4, 1],
  common_state_loading[4, 1],
  diag(theta),
  phi_0,
  c(psi_t),
  diag(psi_p),
  psi_s0,
  psi_s,
  mu_profile[, 2],
  phi_1,
  nu_0,
  alpha_0,
  kappa_0,
  beta_00,
  gamma_00,
  gamma_10
)
```

This vignette describes the data generation process for a two-profile CULTA model with a covariate. The CULTA model incorporates covariates, latent categorical variables, trait components, state components, and profile-specific means to simulate longitudinal data with latent profile transitions. Data generation is demonstrated at the end of the vignette using the `GenCULTA2Profiles` function, which integrates all components into a single function call.

Let $i \in \left\{ 1, \ldots, n \right\}$ denote the index for individuals, let $t \in \left\{ 0, \ldots, m - 1 \right\}$ denote the index measurement occasions, let $k \in \left\{ 1, \ldots, p \right\}$ denote the index items, and let $c \in \left\{ 0, 1 \right\}$ be the index of the two latent profiles (profile 0 and profile 1). Let $q$ be the trait dimension, $q = 1$ in this context.

```{r}
# dimensions
n # number of individuals
m # measurement occasions
p # number of items
q # common trait dimension
```

## Covariate

The covariate is generated from a normal distribution with mean $\mu_X$ and $\sigma_X$ variance.

```{r}
# covariate parameters
mu_x 
sigma_x
```

```{r}
#| echo = FALSE,
#| eval = FALSE
covariate <- Covariate(
  n = n,
  mu_x = mu_x,
  sigma_x = sigma_x
)
```

## Latent Categorical Variables

Latent categorical variables represent profile membership for each individual at each measurement occasion. In a two-profile model, profile membership is influenced by covariates and previous profile status, following a logistic formulation. We distinguish between:

- Initial profile membership (baseline time point)
- Profile transitions across subsequent time points

We describe both components below.

### Initial Profile Membership

For the first measurement occasion ($t = 0$), profile membership is determined by the following log-odds for belonging to profile 0 (with profile 1 as the reference category):
\begin{equation}
    \left(
        \begin{array}{cc}
            \nu_{0} + \kappa_{0} \times \mathrm{Covariate} & 0 \\
        \end{array}
    \right) .
\end{equation}
The corresponding probability of belonging to each profile is given by:
\begin{equation}
     \left(
       \begin{array}{cc}
           \frac{
             \exp
             \left(
               \nu_{0} + \kappa_{0} \times \mathrm{Covariate}
             \right)
           }{
             \exp
             \left(
               \nu_{0} + \kappa_{0} \times \mathrm{Covariate}
             \right) + 1
           }
           &
           \frac{1}{
             \exp
             \left(
               \nu_{0} + \kappa_{0} \times \mathrm{Covariate}
             \right) + 1
           } \\
       \end{array}
     \right) .
\end{equation}
Profile membership at the first occasion is sampled based on these probabilities.

### Profile Transitions

For subsequent occasions ($t = 1, \ldots, m - 1$), profile transitions depend on the profile at the previous occasion and the covariate. The log-odds for transitioning to profile 0 at time $t$ are given by:
\begin{equation}
    \left(
        \begin{array}{cc}
            \alpha_{0} + \beta_{00} + \gamma_{00} \times \mathrm{Covariate} & 0 \\
	      \alpha_{0} + \gamma_{01} \times \mathrm{Covariate} & 0 \\
        \end{array}
    \right) .
\end{equation}
The probability of transitioning to each profile is computed as:
\begin{equation}
  \left(
    \begin{array}{cc}
      \frac{
        \exp
        \left(
          \alpha_{0} + \beta_{00} + \gamma_{00}
          \times \mathrm{Covariate}
        \right)
      }{
        \exp
        \left(
          \alpha_{0} + \beta_{00} + \gamma_{00}
          \times \mathrm{Covariate}
        \right) + 1
      }
      &
      \frac{1}{
        \exp
        \left(
          \alpha_{0} + \beta_{00} + \gamma_{00}
          \times \mathrm{Covariate}
        \right) + 1
      } \\
      \frac{
        \exp
        \left(
          \alpha_{0} + \gamma_{01} \times \mathrm{Covariate}
        \right)
      }{
        \exp
        \left(
          \alpha_{0} + \gamma_{01} \times \mathrm{Covariate}
        \right) + 1
      }
      &
      \frac{1}{
        \exp
        \left(
          \alpha_{0} + \gamma_{01} \times \mathrm{Covariate}
        \right) + 1
      } \\
    \end{array}
  \right) .
\end{equation}
Profile membership for each subsequent time point is sampled using these transition probabilities, based on the individual's covariate value and previous profile.

```{r}
# profile membership and transition parameters
nu_0
kappa_0
alpha_0
beta_00
gamma_00
gamma_10
```

```{r}
#| echo = FALSE,
#| eval = FALSE
categorical <- Categorical2Profiles(
  covariate = covariate,
  nu_0 = nu_0,
  kappa_0 = kappa_0,
  alpha_0 = alpha_0,
  beta_00 = beta_00,
  gamma_00 = gamma_00,
  gamma_10 = gamma_10,
  m = m
)
```

## Trait Components

The trait variate captures between-person differences and is composed of a shared (common) component and item-specific (unique) components. The full decomposition is given by:
\begin{equation}
    \mathrm{Trait}_{i}
    =
    \mathrm{Common\ Trait\ Loading}
    \times \mathrm{Common\ Trait}_{i}
    +
    \mathrm{Unique\ Trait}_{i} .
\end{equation}
We describe each component below.

### Common Trait

The common trait $\mathrm{Common\ Trait}_{i}$ represents shared individual differences that influence all items uniformly. It is drawn from a normal distribution with mean $\mu_T$ and variance $\psi_T$:
\begin{equation}
    \mathrm{Common\ Trait}_{i} \sim \mathcal{N} \left( \mu_T, \psi_T \right)
\end{equation}

The influence of the common trait on each item is determined by the $p \times q$ common trait loading,

### Unique Traits

The unique trait component $\mathrm{Unique\ Trait}_{k, i}$ captures item-specific stable differences and is drawn from a multivariate normal distribution:
\begin{equation}
    \mathrm{Unique\ Trait}_{i} \sim \mathcal{N} \left( \boldsymbol{\mu}_p, \boldsymbol{\Psi}_{p \times p} \right)
\end{equation}

### Combined Trait Variate

The trait variate for item $k$ and individual $i$ is obtained by combining the common and unique trait components:
\begin{equation}
    \mathrm{Trait}_{k, i} = \mathrm{Common\ Trait\ Loading}_{k} \times \mathrm{Common\ Trait}_{i} + \mathrm{Unique\ Trait}_{k, i} .
\end{equation}
The common trait component introduces shared variance across items, while the unique trait component allows for item-specific differences not explained by the common trait.

```{r}
# trait parameters
psi_t
mu_t
psi_p
mu_p
common_trait_loading
```

```{r}
#| echo = FALSE,
#| eval = FALSE
common_trait <- CommonTrait(
  n = n,
  psi_t = psi_t,
  mu_t = mu_t
)
```

```{r}
#| echo = FALSE,
#| eval = FALSE
unique_trait <- UniqueTrait(
  n = n,
  psi_p = psi_p,
  mu_p = mu_p
)
```

```{r}
#| echo = FALSE,
#| eval = FALSE
trait <- Trait(
  common_trait = common_trait,
  unique_trait = unique_trait,
  common_trait_loading = common_trait_loading
)
```

## State Components

The state variate is composed of two parts: a common state shared across items, and unique states specific to each item. The full decomposition is given by:
\begin{equation}
  \mathrm{State}_{k, i, t} = \mathrm{Common\ State\ Loading}_{k} \times \mathrm{Common\ State}_{i, t} + \mathrm{Unique\ State}_{k, i, t} .
\end{equation}
We describe each component below.

### Common State

The common state $\mathrm{Common\ State}_{i, t}$ evolves over time following a first-order autoregressive process:
\begin{equation}
  \mathrm{Common\ State}_{i, t} = \phi_{c} \times \mathrm{Common\ State}_{i, t - 1} + \zeta_{i, t} .
\end{equation}
The initial common state is drawn from a normal distribution:
\begin{equation}
  \mathrm{Common\ State}_{i, 0} \sim \mathcal{N} \left( 0, \psi_{s_{0}} \right) .
\end{equation}
The innovation term $\zeta_{i, t}$ is normally distributed:
\begin{equation}
  \zeta_{i, t} \sim \mathcal{N} \left( 0, \psi_{s} \right) .
\end{equation}
The autoregressive parameter $\phi_{c}$ depends on latent profile membership $c$:
\begin{equation}
   \phi_{c} = \phi_{0} + \left( \phi_{1} - \phi_{0} \right) c .
\end{equation}
Here, $\phi_{0}$ and $\phi_{1}$ represent the autoregressive coefficients for profiles coded as 0 and 1, respectively.

### Unique State

The unique state $\mathrm{Unique\ State}_{k, i, t}$ captures item-specific deviations and is drawn from a multivariate normal distribution:
\begin{equation}
  \mathrm{Unique\ State}_{i, t} \sim \mathcal{N} \left( 0, \boldsymbol{\theta} \right)
\end{equation}
where $\boldsymbol{\theta}$ is the item-level covariance matrix for the unique state component.

### Combined State Variate

The state variate for item $k$, individual $i$, and time $t$ combines the common and unique state components:
\begin{equation}
  \mathrm{State}_{k, i, t} = \mathrm{Common\ State\ Loading}_{k} \times \mathrm{Common\ State}_{i, t} + \mathrm{Unique\ State}_{k, i, t}
\end{equation}
The common state loading parameter $\mathrm{Common\ State\ Loading}_{k}$ controls the influence of the shared state on each item.

```{r}
# state parameters
common_state_loading
phi_0
phi_1
psi_s0
psi_s
theta
```

```{r}
#| echo = FALSE,
#| eval = FALSE
common_state <- CommonState2Profiles(
  categorical = categorical,
  phi_0 = phi_0,
  phi_1 = phi_1,
  psi_s0 = psi_s0,
  psi_s = psi_s
)
state <- State(
  common_state = common_state,
  common_state_loading = common_state_loading,
  theta = theta
)
```

## Trait-State Plus Profile Specific Means

The observed variable is given by
\begin{equation}
  Y_{k, i, t} = \mu_{k, c} + \mathrm{Trait}_{k, i} + \mathrm{State}_{k, i, t}
\end{equation}
where $\mu_{k, c}$ is the profile specific mean, while $\mathrm{Trait}_{k, i}$ and $\mathrm{State}_{k, i, t}$ correspond to the trait and state components of the model.

```{r}
# profile-specific means
mu_profile
```

```{r}
#| echo = FALSE,
#| eval = FALSE
trait_state_2_profiles <- TraitState2Profiles(
  mu_profile = mu_profile,
  trait = trait,
  state = state,
  categorical = categorical
)
```

## Data Generation

The `GenCULTA2Profiles` function puts together all the components described above to generate data using a single function call.

```{r}
# complete list of R function arguments

# random seed for reproducibility
set.seed(42)

# dimensions
n # number of individuals
m # measurement occasions
p # number of items
q # common trait dimension

# covariate parameters
mu_x 
sigma_x

# profile membership and transition parameters
nu_0
kappa_0
alpha_0
beta_00
gamma_00
gamma_10

# trait parameters
psi_t
mu_t
psi_p
mu_p
common_trait_loading

# state parameters
common_state_loading
phi_0
phi_1
psi_s0
psi_s
theta

# profile-specific means
mu_profile
```

```{r}
#| eval = FALSE
data <- GenCULTA2Profiles(
  n = n,
  m = m,
  mu_x = mu_x,
  sigma_x = sigma_x,
  nu_0 = nu_0,
  kappa_0 = kappa_0,
  alpha_0 = alpha_0,
  beta_00 = beta_00,
  gamma_00 = gamma_00,
  gamma_10 = gamma_10,
  mu_t = mu_t,
  psi_t = psi_t,
  mu_p = mu_p,
  psi_p = psi_p,
  common_trait_loading = common_trait_loading,
  common_state_loading = common_state_loading,
  phi_0 = phi_0,
  phi_1 = phi_1,
  psi_s0 = psi_s0,
  psi_s = psi_s,
  theta = theta, 
  mu_profile = mu_profile
)
```

```{r}
#| include = FALSE
fn_example_data <- root$find_file(
  ".setup",
  "data-raw",
  "example-data.Rds"
)
if (!file.exists(fn_example_data)) {
  data <- GenCULTA2Profiles(
    n = n,
    m = m,
    mu_x = mu_x,
    sigma_x = sigma_x,
    nu_0 = nu_0,
    kappa_0 = kappa_0,
    alpha_0 = alpha_0,
    beta_00 = beta_00,
    gamma_00 = gamma_00,
    gamma_10 = gamma_10,
    mu_t = mu_t,
    psi_t = psi_t,
    mu_p = mu_p,
    psi_p = psi_p,
    common_trait_loading = common_trait_loading,
    common_state_loading = common_state_loading,
    phi_0 = phi_0,
    phi_1 = phi_1,
    psi_s0 = psi_s0,
    psi_s = psi_s,
    theta = theta, 
    mu_profile = mu_profile
  )
  saveRDS(data, file = fn_example_data)
}
data <- readRDS(fn_example_data)
```

## Model Fitting

The `FitCULTA2Profiles` function fits the model using `Mplus`.
**Note:** This function requires that **Mplus** is already installed on the system. To speed up model fitting, consider using the `ncores` argument to leverage multiple cores.

```{r}
#| eval = FALSE
fit <- FitCULTA2Profiles(data = data)
```

```{r}
#| include = FALSE
fn_fit <- root$find_file(
  ".setup",
  "data-raw",
  "culta-2-profiles.Rds"
)
if (!file.exists(fn_fit)) {
  fit <- FitCULTA2Profiles(
    data = data
  )
  saveRDS(fit, file = fn_fit)
}
fit <- readRDS(fn_fit)
```

```{r}
summary(fit)
```

## Parameter Recovery

Parameter recovery was assessed by calculating the differences between the population values and the estimated parameters.

```{r}
#| echo = FALSE
estimates <- coef(fit)
difference <- parameters - estimates
recovery <- cbind(
  parameters,
  estimates,
  difference
)
colnames(recovery) <- c(
  "Parameter",
  "Estimate",
  "Difference"
)
rownames(recovery) <- names(estimates)
knitr::kable(
  x = recovery,
  caption = "Parameter Recovery"
)
```

## Methods

The `FitCULTA2Profiles` function has a number of methods including the following:

- `print`
- `summary`
- `converged`
- `confint`
- `coef`
- `vcov`
- `logLik`
- `AIC`
- `BIC`
- `entropy`
- `anova`


```{r}
#| echo = FALSE,
#| eval = FALSE
converged(fit)
```

```{r}
#| echo = FALSE,
#| eval = FALSE
print(fit)
```

```{r}
#| echo = FALSE,
#| eval = FALSE
summary(fit)
```

```{r}
#| echo = FALSE,
#| eval = FALSE
confint(fit)
```

```{r}
#| echo = FALSE,
#| eval = FALSE
coef(fit)
```

```{r}
#| echo = FALSE,
#| eval = FALSE
vcov(fit)
```

```{r}
#| echo = FALSE,
#| eval = FALSE
logLik(fit)
```

```{r}
#| echo = FALSE,
#| eval = FALSE
AIC(fit)
```

```{r}
#| echo = FALSE,
#| eval = FALSE
BIC(fit, adjust = FALSE)
BIC(fit, adjust = TRUE)
```

```{r}
#| echo = FALSE,
#| eval = FALSE
entropy(fit)
```

## Mplus Script Used

```{r}
#| echo = FALSE,
#| comment = NA,
#| size = "small"
cat(
  paste(
    fit$output$input,
    collapse = "\n"
  )
)
```
