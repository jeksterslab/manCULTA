---
title: "Comparing Two-Profile LTA and CULTA Models"
author: Ivan Jacob Agaloos Pesigan
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Comparing Two-Profile LTA and CULTA Models}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r}
#| include = FALSE
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r}
#| include = FALSE
root <- rprojroot::is_rstudio_project
data_raw <- root$find_file(
  ".setup",
  "data-raw"
)
if (!dir.exists(data_raw)) {
  dir.create(data_raw, recursive = TRUE)
}
```

```{r}
library(manCULTA)
```

```{r}
#| echo = FALSE
# complete list of R function arguments

# random seed for reproducibility
set.seed(42)

# dimensions
n <- 10000 # number of individuals
m <- 6    # measurement occasions
p <- 4    # number of items
q <- 1    # common trait dimension

# covariate parameters
mu_x <- 11.4009
sigma_x <- 24.67566

# profile membership and transition parameters
nu_0 <- -3.563
kappa_0 <- 0.122
alpha_0 <- -3.586
beta_00 <- 2.250
gamma_00 <- 0.063
gamma_10 <- 0.094

# trait parameters
psi_t <- 0.10 * diag(1)
mu_t <- 0
psi_p <- diag(p)
psi_p_1 <- 0.10
psi_p_2 <- 0.10
psi_p_3 <- 0.50
psi_p_4 <- 0.50
diag(psi_p) <- c(
  psi_p_1,
  psi_p_2,
  psi_p_3,
  psi_p_4
)
mu_p <- rep(x = 0, times = p)
common_trait_loading <- matrix(
  data = 1,
  nrow = p,
  ncol = q
)

# state parameters
common_state_loading <- matrix(
  data = 1,
  nrow = p,
  ncol = 1
)
phi_0 <- 0.000
phi_1 <- 0.311
psi_s0 <- 1.00
psi_s <- 0.25
theta <- 0.15 * diag(p)

# profile-specific means
mu_profile <- cbind(
  c(2.253, 1.493, 1.574, 1.117),
  c(-0.278, -0.165, -0.199, -0.148)
)

# parameters
parameters <- c(
  mu_profile[, 1],
  mu_profile[, 2],
  nu_0,
  alpha_0,
  kappa_0,
  beta_00,
  gamma_00,
  gamma_10 
)
```

We generate data using the CULTA model with two latent profiles, where profile membership depends on a covariate and profile transitions follow a multinomial structure. However, for model fitting, we impose a simpler structure by fitting a regular latent transition analysis (LTA) model. We then compare this misspecified model to the correctly specified two-profile CULTA model.

## Data Generation

```{r}
# complete list of R function arguments

# random seed for reproducibility
set.seed(42)

# dimensions
n # number of individuals
m # measurement occasions
p # number of items
q # common trait dimension

# covariate parameters
mu_x 
sigma_x

# profile membership and transition parameters
nu_0
kappa_0
alpha_0
beta_00
gamma_00
gamma_10

# trait parameters
psi_t
mu_t
psi_p
mu_p
common_trait_loading

# state parameters
common_state_loading
phi_0
phi_1
psi_s0
psi_s
theta

# profile-specific means
mu_profile
```

```{r}
#| eval = FALSE
data <- GenCULTA2Profiles(
  n = n,
  m = m,
  mu_x = mu_x,
  sigma_x = sigma_x,
  nu_0 = nu_0,
  kappa_0 = kappa_0,
  alpha_0 = alpha_0,
  beta_00 = beta_00,
  gamma_00 = gamma_00,
  gamma_10 = gamma_10,
  mu_t = mu_t,
  psi_t = psi_t,
  mu_p = mu_p,
  psi_p = psi_p,
  common_trait_loading = common_trait_loading,
  common_state_loading = common_state_loading,
  phi_0 = phi_0,
  phi_1 = phi_1,
  psi_s0 = psi_s0,
  psi_s = psi_s,
  theta = theta, 
  mu_profile = mu_profile
)
```

```{r}
#| include = FALSE
fn_example_data <- root$find_file(
  ".setup",
  "data-raw",
  "example-data.Rds"
)
if (!file.exists(fn_example_data)) {
  data <- GenCULTA2Profiles(
    n = n,
    m = m,
    mu_x = mu_x,
    sigma_x = sigma_x,
    nu_0 = nu_0,
    kappa_0 = kappa_0,
    alpha_0 = alpha_0,
    beta_00 = beta_00,
    gamma_00 = gamma_00,
    gamma_10 = gamma_10,
    mu_t = mu_t,
    psi_t = psi_t,
    mu_p = mu_p,
    psi_p = psi_p,
    common_trait_loading = common_trait_loading,
    common_state_loading = common_state_loading,
    phi_0 = phi_0,
    phi_1 = phi_1,
    psi_s0 = psi_s0,
    psi_s = psi_s,
    theta = theta, 
    mu_profile = mu_profile
  )
  saveRDS(data, file = fn_example_data)
}
data <- readRDS(fn_example_data)
```

## Model Fitting

The `FitLTA2Profiles` function fits the misspecified two-profile LTA model using `Mplus`.
**Note:** This function requires that **Mplus** is already installed on the system.

```{r}
#| eval = FALSE
lta <- FitLTA2Profiles(data = data)
```

The `FitCULTA2Profiles` function fits the correct two-profile model using `Mplus`.
**Note:** This function requires that **Mplus** is already installed on the system. To speed up model fitting, consider using the `ncores` argument to leverage multiple cores.

```{r}
#| eval = FALSE
culta <- FitCULTA2Profiles(data = data)
```

```{r}
#| include = FALSE
fn_fit_lta <- root$find_file(
  ".setup",
  "data-raw",
  "lta-2-profiles.Rds"
)
if (!file.exists(fn_fit_lta)) {
  lta <- FitLTA2Profiles(
    data = data
  )
  saveRDS(lta, file = fn_fit_lta)
}
lta <- readRDS(fn_fit_lta)
```

```{r}
#| include = FALSE
fn_fit_culta <- root$find_file(
  ".setup",
  "data-raw",
  "culta-2-profiles.Rds"
)
if (!file.exists(fn_fit_culta)) {
  culta <- FitCULTA2Profiles(
    data = data
  )
  saveRDS(culta, file = fn_fit_culta)
}
culta <- readRDS(fn_fit_culta)
```

## Model Comparison

The `anova` function can be used to compare the two fitted models.

```{r}
anova(lta, culta)
```

## Parameter Recovery

Parameter recovery was assessed by calculating the differences between the population values and the estimated profile-specific means and log-odds.

```{r}
#| echo = FALSE
lta_coef <- coef(lta)[
  c(
    "mu_10",
    "mu_20",
    "mu_30",
    "mu_40",
    "mu_11",
    "mu_21",
    "mu_31",
    "mu_41",
    "nu_0",
    "alpha_0",
    "kappa_0",
    "beta_00",
    "gamma_00",
    "gamma_10"
  )
]
culta_coef <- coef(culta)[
  c(
    "mu_10",
    "mu_20",
    "mu_30",
    "mu_40",
    "mu_11",
    "mu_21",
    "mu_31",
    "mu_41",
    "nu_0",
    "alpha_0",
    "kappa_0",
    "beta_00",
    "gamma_00",
    "gamma_10"
  )
]
lta_difference <- parameters - lta_coef
culta_difference <- parameters - culta_coef
recovery <- cbind(
  parameters,
  lta_coef,
  lta_difference,
  culta_coef,
  culta_difference
)
colnames(recovery) <- c(
  "Parameter",
  "LTA Estimate",
  "Difference",
  "CULTA Estimate",
  "Difference"
)
rownames(recovery) <- names(culta_coef)
knitr::kable(
  x = recovery,
  caption = "Parameter Recovery"
)
```

## Mplus Script Used

The LTA model was estimated using the following `Mplus` script.

```{r}
#| echo = FALSE,
#| comment = NA,
#| size = "small"
cat(
  paste(
    lta$output$input,
    collapse = "\n"
  )
)
```
