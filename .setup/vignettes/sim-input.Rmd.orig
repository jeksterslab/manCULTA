---
title: "Generating Mplus Input Files"
author: Ivan Jacob Agaloos Pesigan
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Generating Mplus Input Files}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r}
#| include = FALSE
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r}
#| include = FALSE
root <- rprojroot::is_rstudio_project
data_raw <- root$find_file(
  ".setup",
  "data-raw"
)
if (!dir.exists(data_raw)) {
  dir.create(data_raw, recursive = TRUE)
}
```

The `FitCULTA1Profile`, `FitCULTA2Profiles`, and `FitCULTA3Profiles` functions require that **Mplus** is installed on the system.

In contrast, the `InputCULTA1Profile` and `InputCULTA2Profiles` functions only generate Mplus-compatible data and input files. These files can be transferred and run on another machine with **Mplus** installed.

The accompanying vignette demonstrates the use of the `InputCULTA1Profile` and `InputCULTA2Profiles` functions for preparing and exporting the necessary `Mplus` files.

The workflow proceeds as follows:

1. **Generate the data**.
2. **Use the `InputCULTA*` functions** to create Mplus-compatible data and input files.
3. **Transfer and run the generated files** on a system where **Mplus** is installed.

```{r}
library(manCULTA)
```

```{r}
#| echo = FALSE
# complete list of R function arguments

# random seed for reproducibility
set.seed(42)

# dimensions
n <- 10000 # number of individuals
m <- 6    # measurement occasions
p <- 4    # number of items
q <- 1    # common trait dimension

# covariate parameters
mu_x <- 11.4009
sigma_x <- 24.67566

# profile membership and transition parameters
nu_0 <- -3.563
kappa_0 <- 0.122
alpha_0 <- -3.586
beta_00 <- 2.250
gamma_00 <- 0.063
gamma_10 <- 0.094

# trait parameters
psi_t <- 0.10 * diag(1)
mu_t <- 0
psi_p <- diag(p)
psi_p_1 <- 0.10
psi_p_2 <- 0.10
psi_p_3 <- 0.50
psi_p_4 <- 0.50
diag(psi_p) <- c(
  psi_p_1,
  psi_p_2,
  psi_p_3,
  psi_p_4
)
mu_p <- rep(x = 0, times = p)
common_trait_loading <- matrix(
  data = 1,
  nrow = p,
  ncol = q
)

# state parameters
common_state_loading <- matrix(
  data = 1,
  nrow = p,
  ncol = 1
)
phi_0 <- 0.000
phi_1 <- 0.311
psi_s0 <- 1.00
psi_s <- 0.25
theta <- 0.15 * diag(p)

# profile-specific means
mu_profile <- cbind(
  c(2.253, 1.493, 1.574, 1.117),
  c(-0.278, -0.165, -0.199, -0.148)
)
```

## Data Generation

```{r}
# complete list of R function arguments

# random seed for reproducibility
set.seed(42)

# dimensions
n # number of individuals
m # measurement occasions
p # number of items
q # common trait dimension

# covariate parameters
mu_x 
sigma_x

# profile membership and transition parameters
nu_0
kappa_0
alpha_0
beta_00
gamma_00
gamma_10

# trait parameters
psi_t
mu_t
psi_p
mu_p
common_trait_loading

# state parameters
common_state_loading
phi_0
phi_1
psi_s0
psi_s
theta

# profile-specific means
mu_profile
```

```{r}
#| eval = FALSE
data <- GenCULTA2Profiles(
  n = n,
  m = m,
  mu_x = mu_x,
  sigma_x = sigma_x,
  nu_0 = nu_0,
  kappa_0 = kappa_0,
  alpha_0 = alpha_0,
  beta_00 = beta_00,
  gamma_00 = gamma_00,
  gamma_10 = gamma_10,
  mu_t = mu_t,
  psi_t = psi_t,
  mu_p = mu_p,
  psi_p = psi_p,
  common_trait_loading = common_trait_loading,
  common_state_loading = common_state_loading,
  phi_0 = phi_0,
  phi_1 = phi_1,
  psi_s0 = psi_s0,
  psi_s = psi_s,
  theta = theta, 
  mu_profile = mu_profile
)
```

```{r}
#| include = FALSE
fn_example_data <- root$find_file(
  ".setup",
  "data-raw",
  "example-data.Rds"
)
if (!file.exists(fn_example_data)) {
  data <- GenCULTA2Profiles(
    n = n,
    m = m,
    mu_x = mu_x,
    sigma_x = sigma_x,
    nu_0 = nu_0,
    kappa_0 = kappa_0,
    alpha_0 = alpha_0,
    beta_00 = beta_00,
    gamma_00 = gamma_00,
    gamma_10 = gamma_10,
    mu_t = mu_t,
    psi_t = psi_t,
    mu_p = mu_p,
    psi_p = psi_p,
    common_trait_loading = common_trait_loading,
    common_state_loading = common_state_loading,
    phi_0 = phi_0,
    phi_1 = phi_1,
    psi_s0 = psi_s0,
    psi_s = psi_s,
    theta = theta, 
    mu_profile = mu_profile
  )
  saveRDS(data, file = fn_example_data)
}
data <- readRDS(fn_example_data)
```

## Generate Mplus Files

In this stage, we generate the Mplus-compatible data and input files using the `InputCULTA1Profile`, `InputCULTA2Profiles`, `InputLTA2Profiles`, and `InputRILTA2Profiles` functions. These functions take the simulated dataset and export the necessary files to run the model in `Mplus`.

Each function corresponds to a specific version of the CULTA model:

```{r}
InputCULTA1Profile(data = data)
```

```{r}
InputCULTA2Profiles(data = data)
```

```{r}
InputLTA2Profiles(data = data)
```

```{r}
InputRILTA2Profiles(data = data)
```

## Run in Mplus

In the final stage, the Mplus-compatible data and input files generated by the `InputCULTA1Profile`, `InputCULTA2Profiles`, `InputLTA2Profiles`, and `InputRILTA2Profiles` functions can be transferred to a machine where `Mplus` is installed.

To run the model:

- Open `Mplus` on the target system.
- Load the generated `.inp` (input) file.
- Execute the model to produce the desired output, including parameter estimates, fit statistics, and saved results (e.g., `TECH3`, `TECH4`, and `CPROBS`).

This stage completes the workflow by fitting the CULTA model using the fully prepared files from earlier stages.
