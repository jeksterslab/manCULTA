[{"path":"https://github.com/jeksterslab/manCULTA/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/manCULTA/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://github.com/jeksterslab/manCULTA/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://github.com/jeksterslab/manCULTA/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://github.com/jeksterslab/manCULTA/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://github.com/jeksterslab/manCULTA/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://github.com/jeksterslab/manCULTA/articles/containers.html","id":"apptainersingularity-image-file","dir":"Articles","previous_headings":"","what":"Apptainer/Singularity Image File","title":"Containers","text":"simulation performed using Apptainer/Singularity manculta.sif image file. image linux container manCULTA package dependencies pre-installed. build Apptainer/Singularity image file (manculta.sif), run following.","code":"apptainer pull manculta.sif docker://ijapesigan/manculta:latest"},{"path":"https://github.com/jeksterslab/manCULTA/articles/containers.html","id":"rstudio-ide-docker-container","dir":"Articles","previous_headings":"","what":"RStudio IDE Docker Container","title":"Containers","text":"facilitate exploration package, created Docker container based Rocker Project. manCULTA package dependencies pre-installed can accessed browser using Rstudio IDE.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/articles/containers.html","id":"run","dir":"Articles","previous_headings":"RStudio IDE Docker Container","what":"Run","title":"Containers","text":"launch Rstudio Server, run following. Open http://localhost:8787 web browser launch Rstudio Server. username: rstudio password: yourpassword NOTE: Mplus closed-source proprietary software, included publicly available containers. Consequently, functions require Mplus work containers.","code":"docker run --rm -ti -e PASSWORD=yourpassword -p 127.0.0.1:8787:8787 ijapesigan/manculta"},{"path":"https://github.com/jeksterslab/manCULTA/articles/empirical-mplus.html","id":"final-model","dir":"Articles","previous_headings":"","what":"Final Model","title":"Mplus Input File for the Empirical Data Analysis","text":"","code":"TITLE:   2-Profile CULTA with Covariate (Final);  DATA:   FILE = __DATA__;  VARIABLE:   NAMES =     id x     y1t0 y2t0 y3t0 y4t0 y1t1 y2t1 y3t1 y4t1     y1t2 y2t2 y3t2 y4t2 y1t3 y2t3 y3t3 y4t3     y1t4 y2t4 y3t4 y4t4 y1t5 y2t5 y3t5 y4t5   ;   USEVARIABLES =     x     y1t0 y2t0 y3t0 y4t0 y1t1 y2t1 y3t1 y4t1     y1t2 y2t2 y3t2 y4t2 y1t3 y2t3 y3t3 y4t3     y1t4 y2t4 y3t4 y4t4 y1t5 y2t5 y3t5 y4t5   ;   IDVARIABLE = id;   CLASSES = c0(2) c1(2) c2(2) c3(2) c4(2) c5(2);   MISSING = .;  DEFINE:   STANDARDIZE     y1t0 y2t0 y3t0 y4t0 y1t1 y2t1 y3t1 y4t1     y1t2 y2t2 y3t2 y4t2 y1t3 y2t3 y3t3 y4t3     y1t4 y2t4 y3t4 y4t4 y1t5 y2t5 y3t5 y4t5   ;  ANALYSIS:   TYPE = MIXTURE;   STARTS = 200 100;   STSCALE = 2;   STITERATIONS = 200;   PROCESS = __CORES__;   MODEL = NOCOV;  MODEL:   %OVERALL%     ! unique traits -----------------------------------------------------      !! factor loadings     !!! k = 3     u3 BY y3t0@1;     u3 BY y3t1@1;     u3 BY y3t2@1;     u3 BY y3t3@1;     u3 BY y3t4@1;     u3 BY y3t5@1;     !!! k = 4     u4 BY y4t0@1;     u4 BY y4t1@1;     u4 BY y4t2@1;     u4 BY y4t3@1;     u4 BY y4t4@1;     u4 BY y4t5@1;      !! latent means     [ u3@0 ];     [ u4@0 ];      !! latent variances     u3 (psip3);     u4 (psip4);      ! common states -----------------------------------------------------      !! factor loadings     !!! t = 0     s0 BY y1t0@1;     s0 BY y2t0 (lambdas2);     s0 BY y3t0 (lambdas3);     s0 BY y4t0 (lambdas4);     !!! t = 1     s1 BY y1t1@1;     s1 BY y2t1 (lambdas2);     s1 BY y3t1 (lambdas3);     s1 BY y4t1 (lambdas4);     !!! t = 2     s2 BY y1t2@1;     s2 BY y2t2 (lambdas2);     s2 BY y3t2 (lambdas3);     s2 BY y4t2 (lambdas4);     !!! t = 3     s3 BY y1t3@1;     s3 BY y2t3 (lambdas2);     s3 BY y3t3 (lambdas3);     s3 BY y4t3 (lambdas4);     !!! t = 4     s4 BY y1t4@1;     s4 BY y2t4 (lambdas2);     s4 BY y3t4 (lambdas3);     s4 BY y4t4 (lambdas4);     !!! t = 5     s5 BY y1t5@1;     s5 BY y2t5 (lambdas2);     s5 BY y3t5 (lambdas3);     s5 BY y4t5 (lambdas4);      !! latent means     [ s0@0 ];     [ s1@0 ];     [ s2@0 ];     [ s3@0 ];     [ s4@0 ];     [ s5@0 ];      !! latent variance of s0     s0 (psis0);      !! variance of the process noise     s1 (psis);     s2 (psis);     s3 (psis);     s4 (psis);     s5 (psis);      ! unique states -----------------------------------------------------      !! variances     !!! t = 0     y1t0 (theta11);     y2t0 (theta22);     y3t0 (theta33);     y4t0 (theta44);     !!! t = 1     y1t1 (theta11);     y2t1 (theta22);     y3t1 (theta33);     y4t1 (theta44);     !!! t = 2     y1t2 (theta11);     y2t2 (theta22);     y3t2 (theta33);     y4t2 (theta44);     !!! t = 3     y1t3 (theta11);     y2t3 (theta22);     y3t3 (theta33);     y4t3 (theta44);     !!! t = 4     y1t4 (theta11);     y2t4 (theta22);     y3t4 (theta33);     y4t4 (theta44);     !!! t = 5     y1t5 (theta11);     y2t5 (theta22);     y3t5 (theta33);     y4t5 (theta44);      ! constrained intercepts --------------------------------------------      !! t = 0     [ y1t0@0 ];     [ y2t0@0 ];     [ y3t0@0 ];     [ y4t0@0 ];     !! t = 1     [ y1t1@0 ];     [ y2t1@0 ];     [ y3t1@0 ];     [ y4t1@0 ];     !! t = 2     [ y1t2@0 ];     [ y2t2@0 ];     [ y3t2@0 ];     [ y4t2@0 ];     !! t = 3     [ y1t3@0 ];     [ y2t3@0 ];     [ y3t3@0 ];     [ y4t3@0 ];     !! t = 4     [ y1t4@0 ];     [ y2t4@0 ];     [ y3t4@0 ];     [ y4t4@0 ];     !! t = 5     [ y1t5@0 ];     [ y2t5@0 ];     [ y3t5@0 ];     [ y4t5@0 ];      ! lta ---------------------------------------------------------------      !! initial profile membership     [ c0#1 ] (nu0);     c0#1 ON x (kappa0);      !! profile transitions     [ c1#1 ] (alpha0);     [ c2#1 ] (alpha0);     [ c3#1 ] (alpha0);     [ c4#1 ] (alpha0);     [ c5#1 ] (alpha0);     c1#1 ON c0#1 (beta00);     c2#1 ON c1#1 (beta00);     c3#1 ON c2#1 (beta00);     c4#1 ON c3#1 (beta00);     c5#1 ON c4#1 (beta00);  MODEL c0:   %c0#1%     ! profile specific means     [ y1t0 ] (mu10);     [ y2t0 ] (mu20);     [ y3t0 ] (mu30);     [ y4t0 ] (mu40);      ! covariate     c1 ON x (gamma00);    %c0#2%     ! profile specific means     [ y1t0 ] (mu11);     [ y2t0 ] (mu21);     [ y3t0 ] (mu31);     [ y4t0 ] (mu41);      ! covariate     c1 ON x (gamma10);  MODEL c1:   %c1#1%     ! profile specific means     [ y1t1 ] (mu10);     [ y2t1 ] (mu20);     [ y3t1 ] (mu30);     [ y4t1 ] (mu40);      ! covariate     c2 ON x (gamma00);      ! inertia     s1 ON s0@0 (phi0);    %c1#2%     ! profile specific means     [ y1t1 ] (mu11);     [ y2t1 ] (mu21);     [ y3t1 ] (mu31);     [ y4t1 ] (mu41);      ! covariate     c2 ON x (gamma10);      ! inertia     s1 ON s0 (phi1);  MODEL c2:   %c2#1%     ! profile specific means     [ y1t2 ] (mu10);     [ y2t2 ] (mu20);     [ y3t2 ] (mu30);     [ y4t2 ] (mu40);      ! covariate     c3 ON x (gamma00);      ! inertia     s2 ON s1@0 (phi0);    %c2#2%     ! profile specific means     [ y1t2 ] (mu11);     [ y2t2 ] (mu21);     [ y3t2 ] (mu31);     [ y4t2 ] (mu41);      ! covariate     c3 ON x (gamma10);      ! inertia     s2 ON s1 (phi1);  MODEL c3:   %c3#1%     ! profile specific means     [ y1t3 ] (mu10);     [ y2t3 ] (mu20);     [ y3t3 ] (mu30);     [ y4t3 ] (mu40);      ! covariate     c4 ON x (gamma00);      ! inertia     s3 ON s2@0 (phi0);    %c3#2%     ! profile specific means     [ y1t3 ] (mu11);     [ y2t3 ] (mu21);     [ y3t3 ] (mu31);     [ y4t3 ] (mu41);      ! covariate     c4 ON x (gamma10);      ! inertia     s3 ON s2 (phi1);  MODEL c4:   %c4#1%     ! profile specific means     [ y1t4 ] (mu10);     [ y2t4 ] (mu20);     [ y3t4 ] (mu30);     [ y4t4 ] (mu40);      ! covariate     c5 ON x (gamma00);      ! inertia     s4 ON s3@0 (phi0);    %c4#2%     ! profile specific means     [ y1t4 ] (mu11);     [ y2t4 ] (mu21);     [ y3t4 ] (mu31);     [ y4t4 ] (mu41);      ! covariate     c5 ON x (gamma10);      ! inertia     s4 ON s3 (phi1);  MODEL c5:   %c5#1%     ! profile specific means     [ y1t5 ] (mu10);     [ y2t5 ] (mu20);     [ y3t5 ] (mu30);     [ y4t5 ] (mu40);      ! inertia     s5 ON s4@0 (phi0);    %c5#2%     ! profile specific means     [ y1t5 ] (mu11);     [ y2t5 ] (mu21);     [ y3t5 ] (mu31);     [ y4t5 ] (mu41);      ! inertia     s5 ON s4 (phi1);  MODEL CONSTRAINT:   ! means for the first profile are higher than the second   mu10 > mu11;   mu20 > mu21;   mu30 > mu31;   mu40 > mu41;    ! make sure variances are greater than zero   psip3 > 0;   psip4 > 0;   psis0 > 0;   psis > 0;   theta11 > 0;   theta22 > 0;   theta33 > 0;   theta44 > 0;  OUTPUT:   TECH1 TECH3 TECH4 TECH7 TECH8 TECH12 TECH15 ENTROPY;  SAVEDATA:   ESTIMATES = __ESTIMATES__;   RESULTS = __RESULTS__;   TECH3 = __TECH3__;   TECH4 = __TECH4__;   FILE = __CPROB__;   SAVE = CPROBABILITIES;"},{"path":"https://github.com/jeksterslab/manCULTA/articles/manCULTA.html","id":"description","dir":"Articles","previous_headings":"","what":"Description","title":"manCULTA","text":"Research compendium manuscript Pesigan, . J. ., Russell, M. ., Chow, S.-M. (Review). Common Unique Latent Transition Analysis (CULTA) Way Examine Trait-State Dynamics Alcohol Intoxication. https://doi.org/10.0000/0000000000.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/articles/manCULTA.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"manCULTA","text":"can install manCULTA GitHub :","code":"if (!require(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"jeksterslab/manCULTA\")"},{"path":"https://github.com/jeksterslab/manCULTA/articles/manCULTA.html","id":"more-information","dir":"Articles","previous_headings":"","what":"More Information","title":"manCULTA","text":"See GitHub Pages package documentation.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/articles/session.html","id":"session","dir":"Articles","previous_headings":"","what":"Session","title":"manCULTA: Session","text":"","code":"sessionInfo() #> R version 4.5.1 (2025-06-13) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Etc/UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] manCULTA_0.9.2 #>  #> loaded via a namespace (and not attached): #> [1] compiler_4.5.1  tools_4.5.1     Rcpp_1.0.14     rProject_0.0.21 #> [5] knitr_1.50      xfun_0.52       evaluate_1.0.4"},{"path":"https://github.com/jeksterslab/manCULTA/articles/session.html","id":"cpu","dir":"Articles","previous_headings":"","what":"CPU","title":"manCULTA: Session","text":"","code":"cat(system(\"lscpu\", intern = TRUE), sep = \"\\n\") #> Architecture:                         x86_64 #> CPU op-mode(s):                       32-bit, 64-bit #> Address sizes:                        46 bits physical, 48 bits virtual #> Byte Order:                           Little Endian #> CPU(s):                               24 #> On-line CPU(s) list:                  0-23 #> Vendor ID:                            GenuineIntel #> Model name:                           Intel(R) Xeon(R) CPU E5-2680 v3 @ 2.50GHz #> CPU family:                           6 #> Model:                                63 #> Thread(s) per core:                   1 #> Core(s) per socket:                   12 #> Socket(s):                            2 #> Stepping:                             2 #> CPU(s) scaling MHz:                   63% #> CPU max MHz:                          3300.0000 #> CPU min MHz:                          1200.0000 #> BogoMIPS:                             4988.36 #> Flags:                                fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm cpuid_fault epb invpcid_single pti ssbd ibrs ibpb stibp fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid cqm xsaveopt cqm_llc cqm_occup_llc dtherm ida arat pln pts md_clear flush_l1d #> L1d cache:                            768 KiB (24 instances) #> L1i cache:                            768 KiB (24 instances) #> L2 cache:                             6 MiB (24 instances) #> L3 cache:                             60 MiB (2 instances) #> NUMA node(s):                         2 #> NUMA node0 CPU(s):                    0,2,4,6,8,10,12,14,16,18,20,22 #> NUMA node1 CPU(s):                    1,3,5,7,9,11,13,15,17,19,21,23 #> Vulnerability Gather data sampling:   Not affected #> Vulnerability Itlb multihit:          KVM: Mitigation: VMX unsupported #> Vulnerability L1tf:                   Mitigation; PTE Inversion #> Vulnerability Mds:                    Mitigation; Clear CPU buffers; SMT disabled #> Vulnerability Meltdown:               Mitigation; PTI #> Vulnerability Mmio stale data:        Mitigation; Clear CPU buffers; SMT disabled #> Vulnerability Reg file data sampling: Not affected #> Vulnerability Retbleed:               Not affected #> Vulnerability Spec rstack overflow:   Not affected #> Vulnerability Spec store bypass:      Mitigation; Speculative Store Bypass disabled via prctl #> Vulnerability Spectre v1:             Mitigation; usercopy/swapgs barriers and __user pointer sanitization #> Vulnerability Spectre v2:             Mitigation; Retpolines; IBPB conditional; IBRS_FW; RSB filling; PBRSB-eIBRS Not affected; BHI Not affected #> Vulnerability Srbds:                  Not affected #> Vulnerability Tsx async abort:        Not affected"},{"path":"https://github.com/jeksterslab/manCULTA/articles/session.html","id":"memory","dir":"Articles","previous_headings":"","what":"Memory","title":"manCULTA: Session","text":"","code":"cat(system(\"free -g -h -t\", intern = TRUE), sep = \"\\n\") #>                total        used        free      shared  buff/cache   available #> Mem:           251Gi        11Gi        78Gi       5.7Gi       169Gi       240Gi #> Swap:             0B          0B          0B #> Total:         251Gi        11Gi        78Gi"},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-culta-1-profile.html","id":"data-generation","dir":"Articles","previous_headings":"","what":"Data Generation","title":"Comparing One- and Two-Profile Models","text":"","code":"# complete list of R function arguments  # random seed for reproducibility set.seed(42)  # dimensions n # number of individuals #> [1] 1000 m # measurement occasions #> [1] 6 p # number of items #> [1] 4 q # common trait dimension #> [1] 1  # covariate parameters mu_x  #> [1] 11.4009 sigma_x #> [1] 24.67566  # profile membership and transition parameters nu_0 #> [1] -3.563 kappa_0 #> [1] 0.122 alpha_0 #> [1] -3.586 beta_00 #> [1] 2.25 gamma_00 #> [1] 0.063 gamma_10 #> [1] 0.094  # trait parameters psi_t #>      [,1] #> [1,]  0.1 mu_t #> [1] 0 psi_p #>      [,1] [,2] [,3] [,4] #> [1,]  0.1  0.0  0.0  0.0 #> [2,]  0.0  0.1  0.0  0.0 #> [3,]  0.0  0.0  0.5  0.0 #> [4,]  0.0  0.0  0.0  0.5 mu_p #> [1] 0 0 0 0 common_trait_loading #>      [,1] #> [1,]    1 #> [2,]    1 #> [3,]    1 #> [4,]    1  # state parameters common_state_loading #>      [,1] #> [1,]    1 #> [2,]    1 #> [3,]    1 #> [4,]    1 phi_0 #> [1] 0 phi_1 #> [1] 0.311 psi_s0 #> [1] 1 psi_s #> [1] 0.25 theta #>      [,1] [,2] [,3] [,4] #> [1,] 0.15 0.00 0.00 0.00 #> [2,] 0.00 0.15 0.00 0.00 #> [3,] 0.00 0.00 0.15 0.00 #> [4,] 0.00 0.00 0.00 0.15  # profile-specific means mu_profile #>       [,1]   [,2] #> [1,] 2.253 -0.278 #> [2,] 1.493 -0.165 #> [3,] 1.574 -0.199 #> [4,] 1.117 -0.148 data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,    mu_profile = mu_profile )"},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-culta-1-profile.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Comparing One- and Two-Profile Models","text":"FitCULTA1Profiles function fits misspecified one-profile model using Mplus. Note: function requires Mplus already installed system. FitCULTA2Profiles function fits correct two-profile model using Mplus. Note: function requires Mplus already installed system. speed model fitting, consider using ncores argument leverage multiple cores.","code":"one_profile <- FitCULTA1Profile(data = data) two_profiles <- FitCULTA2Profiles(data = data)"},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-culta-1-profile.html","id":"model-comparison","dir":"Articles","previous_headings":"","what":"Model Comparison","title":"Comparing One- and Two-Profile Models","text":"anova function can used compare two fitted models.","code":"anova(one_profile, two_profiles) #> $fit #>                    logLik df correction      AIC      BIC     aBIC   entropy #> 1-profile CULTA -24432.83 22   1.093913 48909.65 49017.62 48947.75 0.0000000 #> 2-profile CULTA -23536.42 33   0.999548 47138.83 47300.79 47195.98 0.9410144 #>  #> $test #> chi_diff  df_diff  p_value  #> 2211.121   11.000    0.000"},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-culta-2-profiles.html","id":"covariate","dir":"Articles","previous_headings":"","what":"Covariate","title":"Two-Profile Common and Unique Latent Transition Analysis","text":"covariate generated normal distribution mean μX\\mu_X σX\\sigma_X variance.","code":"# covariate parameters mu_x  #> [1] 11.4009 sigma_x #> [1] 24.67566"},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-culta-2-profiles.html","id":"latent-categorical-variables","dir":"Articles","previous_headings":"","what":"Latent Categorical Variables","title":"Two-Profile Common and Unique Latent Transition Analysis","text":"Latent categorical variables represent profile membership individual measurement occasion. two-profile model, profile membership influenced covariates previous profile status, following logistic formulation. distinguish : Initial profile membership (baseline time point) Profile transitions across subsequent time points describe components .","code":""},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-culta-2-profiles.html","id":"initial-profile-membership","dir":"Articles","previous_headings":"Latent Categorical Variables","what":"Initial Profile Membership","title":"Two-Profile Common and Unique Latent Transition Analysis","text":"first measurement occasion (t=0t = 0), profile membership determined following log-odds belonging profile 0 (profile 1 reference category): (ν0+κ0×Covariate0).\\begin{equation}     \\left(         \\begin{array}{cc}             \\nu_{0} + \\kappa_{0} \\times \\mathrm{Covariate} & 0 \\\\         \\end{array}     \\right) . \\end{equation} corresponding probability belonging profile given : (exp⁡(ν0+κ0×Covariate)exp⁡(ν0+κ0×Covariate)+11exp⁡(ν0+κ0×Covariate)+1).\\begin{equation}      \\left(        \\begin{array}{cc}            \\frac{              \\exp              \\left(                \\nu_{0} + \\kappa_{0} \\times \\mathrm{Covariate}              \\right)            }{              \\exp              \\left(                \\nu_{0} + \\kappa_{0} \\times \\mathrm{Covariate}              \\right) + 1            }            &            \\frac{1}{              \\exp              \\left(                \\nu_{0} + \\kappa_{0} \\times \\mathrm{Covariate}              \\right) + 1            } \\\\        \\end{array}      \\right) . \\end{equation} Profile membership first occasion sampled based probabilities.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-culta-2-profiles.html","id":"profile-transitions","dir":"Articles","previous_headings":"Latent Categorical Variables","what":"Profile Transitions","title":"Two-Profile Common and Unique Latent Transition Analysis","text":"subsequent occasions (t=1,…,m−1t = 1, \\ldots, m - 1), profile transitions depend profile previous occasion covariate. log-odds transitioning profile 0 time tt given : (α0+β00+γ00×Covariate0α0+γ01×Covariate0).\\begin{equation}     \\left(         \\begin{array}{cc}             \\alpha_{0} + \\beta_{00} + \\gamma_{00} \\times \\mathrm{Covariate} & 0 \\\\           \\alpha_{0} + \\gamma_{01} \\times \\mathrm{Covariate} & 0 \\\\         \\end{array}     \\right) . \\end{equation} probability transitioning profile computed : (exp⁡(α0+β00+γ00×Covariate)exp⁡(α0+β00+γ00×Covariate)+11exp⁡(α0+β00+γ00×Covariate)+1exp⁡(α0+γ01×Covariate)exp⁡(α0+γ01×Covariate)+11exp⁡(α0+γ01×Covariate)+1).\\begin{equation}   \\left(     \\begin{array}{cc}       \\frac{         \\exp         \\left(           \\alpha_{0} + \\beta_{00} + \\gamma_{00}           \\times \\mathrm{Covariate}         \\right)       }{         \\exp         \\left(           \\alpha_{0} + \\beta_{00} + \\gamma_{00}           \\times \\mathrm{Covariate}         \\right) + 1       }       &       \\frac{1}{         \\exp         \\left(           \\alpha_{0} + \\beta_{00} + \\gamma_{00}           \\times \\mathrm{Covariate}         \\right) + 1       } \\\\       \\frac{         \\exp         \\left(           \\alpha_{0} + \\gamma_{01} \\times \\mathrm{Covariate}         \\right)       }{         \\exp         \\left(           \\alpha_{0} + \\gamma_{01} \\times \\mathrm{Covariate}         \\right) + 1       }       &       \\frac{1}{         \\exp         \\left(           \\alpha_{0} + \\gamma_{01} \\times \\mathrm{Covariate}         \\right) + 1       } \\\\     \\end{array}   \\right) . \\end{equation} Profile membership subsequent time point sampled using transition probabilities, based individual’s covariate value previous profile.","code":"# profile membership and transition parameters nu_0 #> [1] -3.563 kappa_0 #> [1] 0.122 alpha_0 #> [1] -3.586 beta_00 #> [1] 2.25 gamma_00 #> [1] 0.063 gamma_10 #> [1] 0.094"},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-culta-2-profiles.html","id":"trait-components","dir":"Articles","previous_headings":"","what":"Trait Components","title":"Two-Profile Common and Unique Latent Transition Analysis","text":"trait variate captures -person differences composed shared (common) component item-specific (unique) components. full decomposition given : Traiti=CommonTraitLoading×CommonTraiti+UniqueTraiti.\\begin{equation}     \\mathrm{Trait}_{}     =     \\mathrm{Common\\ Trait\\ Loading}     \\times \\mathrm{Common\\ Trait}_{}     +     \\mathrm{Unique\\ Trait}_{} . \\end{equation} describe component .","code":""},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-culta-2-profiles.html","id":"common-trait","dir":"Articles","previous_headings":"Trait Components","what":"Common Trait","title":"Two-Profile Common and Unique Latent Transition Analysis","text":"common trait CommonTraiti\\mathrm{Common\\ Trait}_{} represents shared individual differences influence items uniformly. drawn normal distribution mean μt\\mu_t variance ψt\\psi_t: CommonTraiti∼𝒩(μt,ψt)\\begin{equation}     \\mathrm{Common\\ Trait}_{} \\sim \\mathcal{N} \\left( \\mu_t, \\psi_t \\right) \\end{equation} influence common trait item determined p×qp \\times q common trait loading,","code":""},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-culta-2-profiles.html","id":"unique-traits","dir":"Articles","previous_headings":"Trait Components","what":"Unique Traits","title":"Two-Profile Common and Unique Latent Transition Analysis","text":"unique trait component UniqueTraitk,\\mathrm{Unique\\ Trait}_{k, } captures item-specific stable differences drawn multivariate normal distribution: UniqueTraiti∼𝒩(𝛍p,𝚿p×p)\\begin{equation}     \\mathrm{Unique\\ Trait}_{} \\sim \\mathcal{N} \\left( \\boldsymbol{\\mu}_p, \\boldsymbol{\\Psi}_{p \\times p} \\right) \\end{equation}","code":""},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-culta-2-profiles.html","id":"combined-trait-variate","dir":"Articles","previous_headings":"Trait Components","what":"Combined Trait Variate","title":"Two-Profile Common and Unique Latent Transition Analysis","text":"trait variate item kk individual ii obtained combining common unique trait components: Traitk,=CommonTraitLoadingk×CommonTraiti+UniqueTraitk,.\\begin{equation}     \\mathrm{Trait}_{k, } = \\mathrm{Common\\ Trait\\ Loading}_{k} \\times \\mathrm{Common\\ Trait}_{} + \\mathrm{Unique\\ Trait}_{k, } . \\end{equation} common trait component introduces shared variance across items, unique trait component allows item-specific differences explained common trait.","code":"# trait parameters psi_t #>      [,1] #> [1,]  0.1 mu_t #> [1] 0 psi_p #>      [,1] [,2] [,3] [,4] #> [1,]  0.1  0.0  0.0  0.0 #> [2,]  0.0  0.1  0.0  0.0 #> [3,]  0.0  0.0  0.5  0.0 #> [4,]  0.0  0.0  0.0  0.5 mu_p #> [1] 0 0 0 0 common_trait_loading #>      [,1] #> [1,]    1 #> [2,]    1 #> [3,]    1 #> [4,]    1"},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-culta-2-profiles.html","id":"state-components","dir":"Articles","previous_headings":"","what":"State Components","title":"Two-Profile Common and Unique Latent Transition Analysis","text":"state variate composed two parts: common state shared across items, unique states specific item. full decomposition given : Statek,,t=CommonStateLoadingk×CommonStatei,t+UniqueStatek,,t.\\begin{equation}   \\mathrm{State}_{k, , t} = \\mathrm{Common\\ State\\ Loading}_{k} \\times \\mathrm{Common\\ State}_{, t} + \\mathrm{Unique\\ State}_{k, , t} . \\end{equation} describe component .","code":""},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-culta-2-profiles.html","id":"common-state","dir":"Articles","previous_headings":"State Components","what":"Common State","title":"Two-Profile Common and Unique Latent Transition Analysis","text":"common state CommonStatei,t\\mathrm{Common\\ State}_{, t} evolves time following first-order autoregressive process: CommonStatei,t=ϕc×CommonStatei,t−1+ζi,t.\\begin{equation}   \\mathrm{Common\\ State}_{, t} = \\phi_{c} \\times \\mathrm{Common\\ State}_{, t - 1} + \\zeta_{, t} . \\end{equation} initial common state drawn normal distribution: CommonStatei,0∼𝒩(0,ψs0).\\begin{equation}   \\mathrm{Common\\ State}_{, 0} \\sim \\mathcal{N} \\left( 0, \\psi_{s_{0}} \\right) . \\end{equation} innovation term ζi,t\\zeta_{, t} normally distributed: ζi,t∼𝒩(0,ψs).\\begin{equation}   \\zeta_{, t} \\sim \\mathcal{N} \\left( 0, \\psi_{s} \\right) . \\end{equation} autoregressive parameter ϕc\\phi_{c} depends latent profile membership cc: ϕc=ϕ0+(ϕ1−ϕ0)c.\\begin{equation}    \\phi_{c} = \\phi_{0} + \\left( \\phi_{1} - \\phi_{0} \\right) c . \\end{equation} , ϕ0\\phi_{0} ϕ1\\phi_{1} represent autoregressive coefficients profiles coded 0 1, respectively.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-culta-2-profiles.html","id":"unique-state","dir":"Articles","previous_headings":"State Components","what":"Unique State","title":"Two-Profile Common and Unique Latent Transition Analysis","text":"unique state UniqueStatek,,t\\mathrm{Unique\\ State}_{k, , t} captures item-specific deviations drawn multivariate normal distribution: UniqueStatei,t∼𝒩(0,𝛉)\\begin{equation}   \\mathrm{Unique\\ State}_{, t} \\sim \\mathcal{N} \\left( 0, \\boldsymbol{\\theta} \\right) \\end{equation} 𝛉\\boldsymbol{\\theta} item-level covariance matrix unique state component.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-culta-2-profiles.html","id":"combined-state-variate","dir":"Articles","previous_headings":"State Components","what":"Combined State Variate","title":"Two-Profile Common and Unique Latent Transition Analysis","text":"state variate item kk, individual ii, time tt combines common unique state components: Statek,,t=CommonStateLoadingk×CommonStatei,t+UniqueStatek,,t\\begin{equation}   \\mathrm{State}_{k, , t} = \\mathrm{Common\\ State\\ Loading}_{k} \\times \\mathrm{Common\\ State}_{, t} + \\mathrm{Unique\\ State}_{k, , t} \\end{equation} common state loading parameter CommonStateLoadingk\\mathrm{Common\\ State\\ Loading}_{k} controls influence shared state item.","code":"# state parameters common_state_loading #>      [,1] #> [1,]    1 #> [2,]    1 #> [3,]    1 #> [4,]    1 phi_0 #> [1] 0 phi_1 #> [1] 0.311 psi_s0 #> [1] 1 psi_s #> [1] 0.25 theta #>      [,1] [,2] [,3] [,4] #> [1,] 0.15 0.00 0.00 0.00 #> [2,] 0.00 0.15 0.00 0.00 #> [3,] 0.00 0.00 0.15 0.00 #> [4,] 0.00 0.00 0.00 0.15"},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-culta-2-profiles.html","id":"trait-state-plus-profile-specific-means","dir":"Articles","previous_headings":"","what":"Trait-State Plus Profile Specific Means","title":"Two-Profile Common and Unique Latent Transition Analysis","text":"observed variable given Yk,,t=μk,c+Traitk,+Statek,,t\\begin{equation}   Y_{k, , t} = \\mu_{k, c} + \\mathrm{Trait}_{k, } + \\mathrm{State}_{k, , t} \\end{equation} μk,c\\mu_{k, c} profile specific mean, Traitk,\\mathrm{Trait}_{k, } Statek,,t\\mathrm{State}_{k, , t} correspond trait state components model.","code":"# profile-specific means mu_profile #>       [,1]   [,2] #> [1,] 2.253 -0.278 #> [2,] 1.493 -0.165 #> [3,] 1.574 -0.199 #> [4,] 1.117 -0.148"},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-culta-2-profiles.html","id":"data-generation","dir":"Articles","previous_headings":"","what":"Data Generation","title":"Two-Profile Common and Unique Latent Transition Analysis","text":"GenCULTA2Profiles function puts together components described generate data using single function call.","code":"# complete list of R function arguments  # random seed for reproducibility set.seed(42)  # dimensions n # number of individuals #> [1] 1000 m # measurement occasions #> [1] 6 p # number of items #> [1] 4 q # common trait dimension #> [1] 1  # covariate parameters mu_x  #> [1] 11.4009 sigma_x #> [1] 24.67566  # profile membership and transition parameters nu_0 #> [1] -3.563 kappa_0 #> [1] 0.122 alpha_0 #> [1] -3.586 beta_00 #> [1] 2.25 gamma_00 #> [1] 0.063 gamma_10 #> [1] 0.094  # trait parameters psi_t #>      [,1] #> [1,]  0.1 mu_t #> [1] 0 psi_p #>      [,1] [,2] [,3] [,4] #> [1,]  0.1  0.0  0.0  0.0 #> [2,]  0.0  0.1  0.0  0.0 #> [3,]  0.0  0.0  0.5  0.0 #> [4,]  0.0  0.0  0.0  0.5 mu_p #> [1] 0 0 0 0 common_trait_loading #>      [,1] #> [1,]    1 #> [2,]    1 #> [3,]    1 #> [4,]    1  # state parameters common_state_loading #>      [,1] #> [1,]    1 #> [2,]    1 #> [3,]    1 #> [4,]    1 phi_0 #> [1] 0 phi_1 #> [1] 0.311 psi_s0 #> [1] 1 psi_s #> [1] 0.25 theta #>      [,1] [,2] [,3] [,4] #> [1,] 0.15 0.00 0.00 0.00 #> [2,] 0.00 0.15 0.00 0.00 #> [3,] 0.00 0.00 0.15 0.00 #> [4,] 0.00 0.00 0.00 0.15  # profile-specific means mu_profile #>       [,1]   [,2] #> [1,] 2.253 -0.278 #> [2,] 1.493 -0.165 #> [3,] 1.574 -0.199 #> [4,] 1.117 -0.148 data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,    mu_profile = mu_profile )"},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-culta-2-profiles.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Two-Profile Common and Unique Latent Transition Analysis","text":"FitCULTA2Profiles function fits model using Mplus. Note: function requires Mplus already installed system. speed model fitting, consider using ncores argument leverage multiple cores.","code":"fit <- FitCULTA2Profiles(data = data) summary(fit) #> Call: #> FitCULTA2Profiles(data = data) #>                est     se        z      p    2.5%   97.5% #> mu_10       2.2892 0.0345  66.4408 0.0000  2.2217  2.3567 #> mu_20       1.5475 0.0354  43.6871 0.0000  1.4780  1.6169 #> mu_30       1.6470 0.0391  42.1564 0.0000  1.5705  1.7236 #> mu_40       1.1476 0.0375  30.6217 0.0000  1.0741  1.2210 #> lambda_t_2  1.0188 0.1096   9.2959 0.0000  0.8040  1.2336 #> lambda_s_2  1.0125 0.0149  67.8492 0.0000  0.9832  1.0417 #> lambda_t_3  0.9220 0.1603   5.7508 0.0000  0.6078  1.2362 #> lambda_s_3  0.9907 0.0144  68.6033 0.0000  0.9624  1.0190 #> lambda_t_4  1.1529 0.1623   7.1020 0.0000  0.8348  1.4711 #> lambda_s_4  0.9783 0.0152  64.5268 0.0000  0.9486  1.0080 #> theta_11    0.1491 0.0041  36.2299 0.0000  0.1411  0.1572 #> theta_22    0.1439 0.0039  36.4985 0.0000  0.1362  0.1516 #> theta_33    0.1484 0.0041  36.1035 0.0000  0.1403  0.1564 #> theta_44    0.1497 0.0041  36.4700 0.0000  0.1417  0.1577 #> phi_0      -0.0364 0.0465  -0.7824 0.4340 -0.1274  0.0547 #> psi_t       0.0854 0.0158   5.4060 0.0000  0.0544  0.1163 #> psi_p_11    0.0914 0.0098   9.3505 0.0000  0.0723  0.1106 #> psi_p_22    0.0848 0.0096   8.8383 0.0000  0.0660  0.1036 #> psi_p_33    0.5065 0.0259  19.5887 0.0000  0.4558  0.5572 #> psi_p_44    0.5112 0.0261  19.5831 0.0000  0.4600  0.5623 #> psi_s0      1.0311 0.0589  17.5197 0.0000  0.9157  1.1464 #> psi_s       0.2463 0.0092  26.7726 0.0000  0.2283  0.2643 #> mu_11      -0.2877 0.0181 -15.8557 0.0000 -0.3232 -0.2521 #> mu_21      -0.1843 0.0175 -10.5194 0.0000 -0.2186 -0.1499 #> mu_31      -0.1778 0.0268  -6.6429 0.0000 -0.2303 -0.1254 #> mu_41      -0.1727 0.0277  -6.2303 0.0000 -0.2270 -0.1184 #> phi_1       0.3142 0.0179  17.5229 0.0000  0.2790  0.3493 #> nu_0       -4.2692 0.4096 -10.4237 0.0000 -5.0719 -3.4664 #> alpha_0    -3.5916 0.1635 -21.9696 0.0000 -3.9120 -3.2712 #> kappa_0     0.1578 0.0273   5.7834 0.0000  0.1043  0.2112 #> beta_00     2.0830 0.3584   5.8113 0.0000  1.3805  2.7856 #> gamma_00    0.0780 0.0208   3.7502 0.0002  0.0372  0.1187 #> gamma_10    0.0990 0.0122   8.1211 0.0000  0.0751  0.1229"},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-culta-2-profiles.html","id":"parameter-recovery","dir":"Articles","previous_headings":"","what":"Parameter Recovery","title":"Two-Profile Common and Unique Latent Transition Analysis","text":"Parameter recovery assessed calculating differences population values estimated parameters. Parameter Recovery","code":""},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-culta-2-profiles.html","id":"methods","dir":"Articles","previous_headings":"","what":"Methods","title":"Two-Profile Common and Unique Latent Transition Analysis","text":"FitCULTA2Profiles function number methods including following: print summary converged confint coef vcov logLik AIC BIC entropy anova","code":""},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-culta-2-profiles.html","id":"mplus-script-used","dir":"Articles","previous_headings":"Methods","what":"Mplus Script Used","title":"Two-Profile Common and Unique Latent Transition Analysis","text":"","code":"TITLE:   2-Profile CULTA with Covariate;  DATA:   FILE = data.dat;  VARIABLE:   NAMES =     id     x     y1t0     y2t0     y3t0     y4t0     y1t1     y2t1     y3t1     y4t1     y1t2     y2t2     y3t2     y4t2     y1t3     y2t3     y3t3     y4t3     y1t4     y2t4     y3t4     y4t4     y1t5     y2t5     y3t5     y4t5   ;   USEVARIABLES =     x     y1t0     y2t0     y3t0     y4t0     y1t1     y2t1     y3t1     y4t1     y1t2     y2t2     y3t2     y4t2     y1t3     y2t3     y3t3     y4t3     y1t4     y2t4     y3t4     y4t4     y1t5     y2t5     y3t5     y4t5   ;   IDVARIABLE = id;   CLASSES =     c0(2)     c1(2)     c2(2)     c3(2)     c4(2)     c5(2)   ;  ANALYSIS:   TYPE = MIXTURE;   STARTS = 20 4;   STSCALE = 5;   STITERATIONS = 10;   PROCESS = 1;   MODEL = NOCOV;  MODEL:   %OVERALL%     ! common trait ------------------------------------------------------      !! factor loadings     !!! t = 0     t BY y1t0@1;     t BY y2t0 (lambdat2);     t BY y3t0 (lambdat3);     t BY y4t0 (lambdat4);     !!! t = 1     t BY y1t1@1;     t BY y2t1 (lambdat2);     t BY y3t1 (lambdat3);     t BY y4t1 (lambdat4);     !!! t = 2     t BY y1t2@1;     t BY y2t2 (lambdat2);     t BY y3t2 (lambdat3);     t BY y4t2 (lambdat4);     !!! t = 3     t BY y1t3@1;     t BY y2t3 (lambdat2);     t BY y3t3 (lambdat3);     t BY y4t3 (lambdat4);     !!! t = 4     t BY y1t4@1;     t BY y2t4 (lambdat2);     t BY y3t4 (lambdat3);     t BY y4t4 (lambdat4);     !!! t = 5     t BY y1t5@1;     t BY y2t5 (lambdat2);     t BY y3t5 (lambdat3);     t BY y4t5 (lambdat4);      !! latent mean     [ t@0 ];      !! latent variance     t (psit);      ! unique traits -----------------------------------------------------      !! factor loadings     !!! k = 1     u1 BY y1t0@1;     u1 BY y1t1@1;     u1 BY y1t2@1;     u1 BY y1t3@1;     u1 BY y1t4@1;     u1 BY y1t5@1;     !!! k = 2     u2 BY y2t0@1;     u2 BY y2t1@1;     u2 BY y2t2@1;     u2 BY y2t3@1;     u2 BY y2t4@1;     u2 BY y2t5@1;     !!! k = 3     u3 BY y3t0@1;     u3 BY y3t1@1;     u3 BY y3t2@1;     u3 BY y3t3@1;     u3 BY y3t4@1;     u3 BY y3t5@1;     !!! k = 4     u4 BY y4t0@1;     u4 BY y4t1@1;     u4 BY y4t2@1;     u4 BY y4t3@1;     u4 BY y4t4@1;     u4 BY y4t5@1;      !! latent means     [ u1@0 ];     [ u2@0 ];     [ u3@0 ];     [ u4@0 ];      !! latent variances     u1 (psip1);     u2 (psip2);     u3 (psip3);     u4 (psip4);      ! common states -----------------------------------------------------      !! factor loadings     !!! t = 0     s0 BY y1t0@1;     s0 BY y2t0 (lambdas2);     s0 BY y3t0 (lambdas3);     s0 BY y4t0 (lambdas4);     !!! t = 1     s1 BY y1t1@1;     s1 BY y2t1 (lambdas2);     s1 BY y3t1 (lambdas3);     s1 BY y4t1 (lambdas4);     !!! t = 2     s2 BY y1t2@1;     s2 BY y2t2 (lambdas2);     s2 BY y3t2 (lambdas3);     s2 BY y4t2 (lambdas4);     !!! t = 3     s3 BY y1t3@1;     s3 BY y2t3 (lambdas2);     s3 BY y3t3 (lambdas3);     s3 BY y4t3 (lambdas4);     !!! t = 4     s4 BY y1t4@1;     s4 BY y2t4 (lambdas2);     s4 BY y3t4 (lambdas3);     s4 BY y4t4 (lambdas4);     !!! t = 5     s5 BY y1t5@1;     s5 BY y2t5 (lambdas2);     s5 BY y3t5 (lambdas3);     s5 BY y4t5 (lambdas4);      !! latent means     [ s0@0 ];     [ s1@0 ];     [ s2@0 ];     [ s3@0 ];     [ s4@0 ];     [ s5@0 ];      !! latent variance of s0     s0 (psis0);      !! variance of the process noise     s1 (psis);     s2 (psis);     s3 (psis);     s4 (psis);     s5 (psis);      ! unique states -----------------------------------------------------      !! variances     !!! t = 0     y1t0 (theta11);     y2t0 (theta22);     y3t0 (theta33);     y4t0 (theta44);     !!! t = 1     y1t1 (theta11);     y2t1 (theta22);     y3t1 (theta33);     y4t1 (theta44);     !!! t = 2     y1t2 (theta11);     y2t2 (theta22);     y3t2 (theta33);     y4t2 (theta44);     !!! t = 3     y1t3 (theta11);     y2t3 (theta22);     y3t3 (theta33);     y4t3 (theta44);     !!! t = 4     y1t4 (theta11);     y2t4 (theta22);     y3t4 (theta33);     y4t4 (theta44);     !!! t = 5     y1t5 (theta11);     y2t5 (theta22);     y3t5 (theta33);     y4t5 (theta44);      ! constrained intercepts --------------------------------------------      !! t = 0     [ y1t0@0 ];     [ y2t0@0 ];     [ y3t0@0 ];     [ y4t0@0 ];     !! t = 1     [ y1t1@0 ];     [ y2t1@0 ];     [ y3t1@0 ];     [ y4t1@0 ];     !! t = 2     [ y1t2@0 ];     [ y2t2@0 ];     [ y3t2@0 ];     [ y4t2@0 ];     !! t = 3     [ y1t3@0 ];     [ y2t3@0 ];     [ y3t3@0 ];     [ y4t3@0 ];     !! t = 4     [ y1t4@0 ];     [ y2t4@0 ];     [ y3t4@0 ];     [ y4t4@0 ];     !! t = 5     [ y1t5@0 ];     [ y2t5@0 ];     [ y3t5@0 ];     [ y4t5@0 ];      ! lta ---------------------------------------------------------------      !! initial profile membership     [ c0#1 ] (nu0);     c0#1 ON x (kappa0);      !! profile transitions     [ c1#1 ] (alpha0);     [ c2#1 ] (alpha0);     [ c3#1 ] (alpha0);     [ c4#1 ] (alpha0);     [ c5#1 ] (alpha0);     c1#1 ON c0#1 (beta00);     c2#1 ON c1#1 (beta00);     c3#1 ON c2#1 (beta00);     c4#1 ON c3#1 (beta00);     c5#1 ON c4#1 (beta00);  MODEL c0:   %c0#1%     ! profile specific means     [ y1t0 ] (mu10);     [ y2t0 ] (mu20);     [ y3t0 ] (mu30);     [ y4t0 ] (mu40);      ! covariate     c1 ON x (gamma00);    %c0#2%     ! profile specific means     [ y1t0 ] (mu11);     [ y2t0 ] (mu21);     [ y3t0 ] (mu31);     [ y4t0 ] (mu41);      ! covariate     c1 ON x (gamma10);  MODEL c1:   %c1#1%     ! profile specific means     [ y1t1 ] (mu10);     [ y2t1 ] (mu20);     [ y3t1 ] (mu30);     [ y4t1 ] (mu40);      ! covariate     c2 ON x (gamma00);      ! inertia     s1 ON s0 (phi0);    %c1#2%     ! profile specific means     [ y1t1 ] (mu11);     [ y2t1 ] (mu21);     [ y3t1 ] (mu31);     [ y4t1 ] (mu41);      ! covariate     c2 ON x (gamma10);      ! inertia     s1 ON s0 (phi1);  MODEL c2:   %c2#1%     ! profile specific means     [ y1t2 ] (mu10);     [ y2t2 ] (mu20);     [ y3t2 ] (mu30);     [ y4t2 ] (mu40);      ! covariate     c3 ON x (gamma00);      ! inertia     s2 ON s1 (phi0);    %c2#2%     ! profile specific means     [ y1t2 ] (mu11);     [ y2t2 ] (mu21);     [ y3t2 ] (mu31);     [ y4t2 ] (mu41);      ! covariate     c3 ON x (gamma10);      ! inertia     s2 ON s1 (phi1);  MODEL c3:   %c3#1%     ! profile specific means     [ y1t3 ] (mu10);     [ y2t3 ] (mu20);     [ y3t3 ] (mu30);     [ y4t3 ] (mu40);      ! covariate     c4 ON x (gamma00);      ! inertia     s3 ON s2 (phi0);    %c3#2%     ! profile specific means     [ y1t3 ] (mu11);     [ y2t3 ] (mu21);     [ y3t3 ] (mu31);     [ y4t3 ] (mu41);      ! covariate     c4 ON x (gamma10);      ! inertia     s3 ON s2 (phi1);  MODEL c4:   %c4#1%     ! profile specific means     [ y1t4 ] (mu10);     [ y2t4 ] (mu20);     [ y3t4 ] (mu30);     [ y4t4 ] (mu40);      ! covariate     c5 ON x (gamma00);      ! inertia     s4 ON s3 (phi0);    %c4#2%     ! profile specific means     [ y1t4 ] (mu11);     [ y2t4 ] (mu21);     [ y3t4 ] (mu31);     [ y4t4 ] (mu41);      ! covariate     c5 ON x (gamma10);      ! inertia     s4 ON s3 (phi1);  MODEL c5:   %c5#1%     ! profile specific means     [ y1t5 ] (mu10);     [ y2t5 ] (mu20);     [ y3t5 ] (mu30);     [ y4t5 ] (mu40);      ! inertia     s5 ON s4 (phi0);    %c5#2%     ! profile specific means     [ y1t5 ] (mu11);     [ y2t5 ] (mu21);     [ y3t5 ] (mu31);     [ y4t5 ] (mu41);      ! inertia     s5 ON s4 (phi1);   MODEL CONSTRAINT:   ! means for the first profile are higher than the second   mu10 > mu11;   mu20 > mu21;   mu30 > mu31;   mu40 > mu41;    ! make sure variances are greater than zero   psit > 0;   psip1 > 0;   psip2 > 0;   psip3 > 0;   psip4 > 0;   psis0 > 0;   psis > 0;   theta11 > 0;   theta22 > 0;   theta33 > 0;   theta44 > 0;  OUTPUT:   TECH1   TECH3   TECH4   TECH7   TECH8   TECH12   TECH13   TECH15   ENTROPY;  SAVEDATA:   ESTIMATES = fn_ICSIHjJ462fvaczvQI98_estimates.dat;   RESULTS = fn_ICSIHjJ462fvaczvQI98_results.dat;   TECH3 = fn_ICSIHjJ462fvaczvQI98_tech3.dat;   TECH4 = fn_ICSIHjJ462fvaczvQI98_tech4.dat;   FILE = fn_ICSIHjJ462fvaczvQI98_cprobs.dat;   SAVE = CPROBABILITIES;"},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-input.html","id":"data-generation","dir":"Articles","previous_headings":"","what":"Data Generation","title":"Generating Mplus Input Files","text":"","code":"# complete list of R function arguments  # random seed for reproducibility set.seed(42)  # dimensions n # number of individuals #> [1] 1000 m # measurement occasions #> [1] 6 p # number of items #> [1] 4 q # common trait dimension #> [1] 1  # covariate parameters mu_x  #> [1] 11.4009 sigma_x #> [1] 24.67566  # profile membership and transition parameters nu_0 #> [1] -3.563 kappa_0 #> [1] 0.122 alpha_0 #> [1] -3.586 beta_00 #> Error: object 'beta_00' not found gamma_00 #> [1] 0.063 gamma_10 #> [1] 0.094  # trait parameters psi_t #>      [,1] #> [1,]    1 mu_t #> [1] 0 psi_p #>      [,1] [,2] [,3] [,4] #> [1,]    1    0    0    0 #> [2,]    0    1    0    0 #> [3,]    0    0    1    0 #> [4,]    0    0    0    1 mu_p #> [1] 0 0 0 0 common_trait_loading #>      [,1] #> [1,]    1 #> [2,]    1 #> [3,]    1 #> [4,]    1  # state parameters common_state_loading #>      [,1] #> [1,]    1 #> [2,]    1 #> [3,]    1 #> [4,]    1 phi_0 #> [1] 0 phi_1 #> [1] 0.311 psi_s0 #> [1] 0.151 psi_s #> [1] 0.29 theta #>      [,1] [,2] [,3] [,4] #> [1,]    1    0    0    0 #> [2,]    0    1    0    0 #> [3,]    0    0    1    0 #> [4,]    0    0    0    1  # profile-specific means mu_profile #>       [,1]   [,2] #> [1,] 2.253 -0.278 #> [2,] 1.493 -0.165 #> [3,] 1.574 -0.199 #> [4,] 1.117 -0.148 data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,    mu_profile = mu_profile )"},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-input.html","id":"generate-mplus-files","dir":"Articles","previous_headings":"","what":"Generate Mplus Files","title":"Generating Mplus Input Files","text":"stage, generate Mplus-compatible data input files using InputCULTA1Profile, InputCULTA2Profiles, InputLTA2Profiles, InputRILTA2Profiles functions. functions take simulated dataset export necessary files run model Mplus. function corresponds specific version CULTA model:","code":"InputCULTA1Profile(data = data) #> Check data and Mplus input files in #> /scratch/ibp5092/manCULTA/vignettes/fl_WKayjJr5WUxgJyKTtzXU InputCULTA2Profiles(data = data) #> Check data and Mplus input files in #> /scratch/ibp5092/manCULTA/vignettes/fl_ov5hJdvrSBedH3XIxwW0 InputLTA2Profiles(data = data) #> Check data and Mplus input files in #> /scratch/ibp5092/manCULTA/vignettes/fl_SPiCltiQICpKB3TeB1br InputRILTA2Profiles(data = data) #> Check data and Mplus input files in #> /scratch/ibp5092/manCULTA/vignettes/fl_Fp17CqRi4u9Q45VhC2La"},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-input.html","id":"run-in-mplus","dir":"Articles","previous_headings":"","what":"Run in Mplus","title":"Generating Mplus Input Files","text":"final stage, Mplus-compatible data input files generated InputCULTA1Profile, InputCULTA2Profiles, InputLTA2Profiles, InputRILTA2Profiles functions can transferred machine Mplus installed. run model: Open Mplus target system. Load generated .inp (input) file. Execute model produce desired output, including parameter estimates, fit statistics, saved results (e.g., TECH3, TECH4, CPROBS). stage completes workflow fitting CULTA model using fully prepared files earlier stages.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-lta-2-profiles.html","id":"data-generation","dir":"Articles","previous_headings":"","what":"Data Generation","title":"Comparing Two-Profile LTA and CULTA Models","text":"","code":"# complete list of R function arguments  # random seed for reproducibility set.seed(42)  # dimensions n # number of individuals #> [1] 1000 m # measurement occasions #> [1] 6 p # number of items #> [1] 4 q # common trait dimension #> [1] 1  # covariate parameters mu_x  #> [1] 11.4009 sigma_x #> [1] 24.67566  # profile membership and transition parameters nu_0 #> [1] -3.563 kappa_0 #> [1] 0.122 alpha_0 #> [1] -3.586 beta_00 #> [1] 2.25 gamma_00 #> [1] 0.063 gamma_10 #> [1] 0.094  # trait parameters psi_t #>      [,1] #> [1,]  0.1 mu_t #> [1] 0 psi_p #>      [,1] [,2] [,3] [,4] #> [1,]  0.1  0.0  0.0  0.0 #> [2,]  0.0  0.1  0.0  0.0 #> [3,]  0.0  0.0  0.5  0.0 #> [4,]  0.0  0.0  0.0  0.5 mu_p #> [1] 0 0 0 0 common_trait_loading #>      [,1] #> [1,]    1 #> [2,]    1 #> [3,]    1 #> [4,]    1  # state parameters common_state_loading #>      [,1] #> [1,]    1 #> [2,]    1 #> [3,]    1 #> [4,]    1 phi_0 #> [1] 0 phi_1 #> [1] 0.311 psi_s0 #> [1] 1 psi_s #> [1] 0.25 theta #>      [,1] [,2] [,3] [,4] #> [1,] 0.15 0.00 0.00 0.00 #> [2,] 0.00 0.15 0.00 0.00 #> [3,] 0.00 0.00 0.15 0.00 #> [4,] 0.00 0.00 0.00 0.15  # profile-specific means mu_profile #>       [,1]   [,2] #> [1,] 2.253 -0.278 #> [2,] 1.493 -0.165 #> [3,] 1.574 -0.199 #> [4,] 1.117 -0.148 data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,    mu_profile = mu_profile )"},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-lta-2-profiles.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Comparing Two-Profile LTA and CULTA Models","text":"FitLTA2Profiles function fits misspecified two-profile LTA model using Mplus. Note: function requires Mplus already installed system. FitCULTA2Profiles function fits correct two-profile model using Mplus. Note: function requires Mplus already installed system. speed model fitting, consider using ncores argument leverage multiple cores.","code":"lta <- FitLTA2Profiles(data = data) culta <- FitCULTA2Profiles(data = data)"},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-lta-2-profiles.html","id":"model-comparison","dir":"Articles","previous_headings":"","what":"Model Comparison","title":"Comparing Two-Profile LTA and CULTA Models","text":"anova function can used compare two fitted models.","code":"anova(lta, culta) #> $fit #>                    logLik df correction      AIC      BIC     aBIC   entropy #> 2-profile LTA   -33097.95 18   2.300145 66231.91 66320.25 66263.08 0.8558553 #> 2-profile CULTA -23536.42 33   0.999548 47138.83 47300.79 47195.98 0.9410144 #>  #> $test #>  chi_diff   df_diff   p_value  #> -34077.26     15.00      1.00"},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-lta-2-profiles.html","id":"parameter-recovery","dir":"Articles","previous_headings":"","what":"Parameter Recovery","title":"Comparing Two-Profile LTA and CULTA Models","text":"Parameter recovery assessed calculating differences population values estimated profile-specific means log-odds. Parameter Recovery","code":""},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-ri-lta-2-profiles.html","id":"data-generation","dir":"Articles","previous_headings":"","what":"Data Generation","title":"Comparing Two-Profile RI-LTA and CULTA Models","text":"","code":"# complete list of R function arguments  # random seed for reproducibility set.seed(42)  # dimensions n # number of individuals #> [1] 1000 m # measurement occasions #> [1] 6 p # number of items #> [1] 4 q # common trait dimension #> [1] 1  # covariate parameters mu_x #> [1] 11.4009 sigma_x #> [1] 24.67566  # profile membership and transition parameters nu_0 #> [1] -3.563 kappa_0 #> [1] 0.122 alpha_0 #> [1] -3.586 beta_00 #> [1] 2.25 gamma_00 #> [1] 0.063 gamma_10 #> [1] 0.094  # trait parameters psi_t #>      [,1] #> [1,]  0.1 mu_t #> [1] 0 psi_p #>      [,1] [,2] [,3] [,4] #> [1,]  0.1  0.0  0.0  0.0 #> [2,]  0.0  0.1  0.0  0.0 #> [3,]  0.0  0.0  0.5  0.0 #> [4,]  0.0  0.0  0.0  0.5 mu_p #> [1] 0 0 0 0 common_trait_loading #>      [,1] #> [1,]    1 #> [2,]    1 #> [3,]    1 #> [4,]    1  # state parameters common_state_loading #>      [,1] #> [1,]    1 #> [2,]    1 #> [3,]    1 #> [4,]    1 phi_0 #> [1] 0 phi_1 #> [1] 0.311 psi_s0 #> [1] 1 psi_s #> [1] 0.25 theta #>      [,1] [,2] [,3] [,4] #> [1,] 0.15 0.00 0.00 0.00 #> [2,] 0.00 0.15 0.00 0.00 #> [3,] 0.00 0.00 0.15 0.00 #> [4,] 0.00 0.00 0.00 0.15  # profile-specific means mu_profile #>       [,1]   [,2] #> [1,] 2.253 -0.278 #> [2,] 1.493 -0.165 #> [3,] 1.574 -0.199 #> [4,] 1.117 -0.148 data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,   mu_profile = mu_profile )"},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-ri-lta-2-profiles.html","id":"model-fitting","dir":"Articles","previous_headings":"","what":"Model Fitting","title":"Comparing Two-Profile RI-LTA and CULTA Models","text":"FitLTA2Profiles function fits misspecified two-profile RI-LTA model using Mplus. Note: function requires Mplus already installed system. FitCULTA2Profiles function fits correct two-profile model using Mplus. Note: function requires Mplus already installed system. speed model fitting, consider using ncores argument leverage multiple cores.","code":"rilta <- FitRILTA2Profiles(data = data) culta <- FitCULTA2Profiles(data = data)"},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-ri-lta-2-profiles.html","id":"model-comparison","dir":"Articles","previous_headings":"","what":"Model Comparison","title":"Comparing Two-Profile RI-LTA and CULTA Models","text":"anova function can used compare two fitted models.","code":"anova(rilta, culta) #> $fit #>                     logLik df correction      AIC      BIC     aBIC   entropy #> 2-profile RI-LTA -30931.40 22   2.475479 61906.80 62014.77 61944.89 0.8932332 #> 2-profile CULTA  -23536.42 33   0.999548 47138.83 47300.79 47195.98 0.9410144 #>  #> $test #>  chi_diff   df_diff   p_value  #> -7575.607    11.000     1.000"},{"path":"https://github.com/jeksterslab/manCULTA/articles/sim-ri-lta-2-profiles.html","id":"parameter-recovery","dir":"Articles","previous_headings":"","what":"Parameter Recovery","title":"Comparing Two-Profile RI-LTA and CULTA Models","text":"Parameter recovery assessed calculating differences population values estimated profile-specific means log-odds. Parameter Recovery","code":""},{"path":"https://github.com/jeksterslab/manCULTA/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ivan Jacob Agaloos Pesigan. Author, maintainer, copyright holder.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pesigan, . J. ., Russell, . J. . & Chow, S.-M. (2025). manCULTA. JOURNAL_TITLE_HERE. https://doi.org/10.0000/0000000000","code":"@Article{,   author = {Ivan Jacob Agaloos Pesigan},   title = {manCULTA},   year = {2025},   doi = {10.0000/0000000000},   journal = {JOURNAL_TITLE_HERE},   note = {R package version 0.9.2}, }"},{"path":"https://github.com/jeksterslab/manCULTA/index.html","id":"manculta","dir":"","previous_headings":"","what":"Common and Unique Latent Transition Analysis (CULTA) as a Way to Examine the Trait-State Dynamics of Alcohol Intoxication","title":"Common and Unique Latent Transition Analysis (CULTA) as a Way to Examine the Trait-State Dynamics of Alcohol Intoxication","text":"Ivan Jacob Agaloos Pesigan 2025-07-12","code":""},{"path":"https://github.com/jeksterslab/manCULTA/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Common and Unique Latent Transition Analysis (CULTA) as a Way to Examine the Trait-State Dynamics of Alcohol Intoxication","text":"Research compendium manuscript Pesigan, . J. ., Russell, M. ., Chow, S.-M. (Review). Common Unique Latent Transition Analysis (CULTA) Way Examine Trait-State Dynamics Alcohol Intoxication. https://doi.org/10.0000/0000000000.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Common and Unique Latent Transition Analysis (CULTA) as a Way to Examine the Trait-State Dynamics of Alcohol Intoxication","text":"can install manCULTA GitHub :","code":"if (!require(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"jeksterslab/manCULTA\")"},{"path":"https://github.com/jeksterslab/manCULTA/index.html","id":"more-information","dir":"","previous_headings":"","what":"More Information","title":"Common and Unique Latent Transition Analysis (CULTA) as a Way to Examine the Trait-State Dynamics of Alcohol Intoxication","text":"See GitHub Pages package documentation.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/AIC.fitculta.html","id":null,"dir":"Reference","previous_headings":"","what":"Akaike's Information Criterion — AIC.fitculta","title":"Akaike's Information Criterion — AIC.fitculta","text":"Akaike's Information Criterion","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/AIC.fitculta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Akaike's Information Criterion — AIC.fitculta","text":"","code":"# S3 method for class 'fitculta' AIC(object, ...)"},{"path":"https://github.com/jeksterslab/manCULTA/reference/AIC.fitculta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Akaike's Information Criterion — AIC.fitculta","text":"object Object class fitculta. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/AIC.fitculta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Akaike's Information Criterion — AIC.fitculta","text":"Returns Akaike's information criterion (AIC).","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/AIC.fitculta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Akaike's Information Criterion — AIC.fitculta","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/AIC.fitculta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Akaike's Information Criterion — AIC.fitculta","text":"","code":"if (FALSE) { # \\dontrun{ # complete list of R function arguments -------------------------------------  # random seed for reproducibility set.seed(42)  # dimensions n <- 1000 # number of individuals m <- 6 # measurement occasions p <- 4 # number of items q <- 1 # common trait dimension  # covariate parameters mu_x <- 11.4009 sigma_x <- 24.67566  # profile membership and transition parameters nu_0 <- -3.563 kappa_0 <- 0.122 alpha_0 <- -3.586 beta_00 <- 2.250 gamma_00 <- 0.063 gamma_10 <- 0.094  # trait parameters psi_t <- 0.10 * diag(1) mu_t <- 0 psi_p <- diag(p) psi_p_1 <- 0.10 psi_p_2 <- 0.10 psi_p_3 <- 0.50 psi_p_4 <- 0.50 diag(psi_p) <- c(   psi_p_1,   psi_p_2,   psi_p_3,   psi_p_4 ) mu_p <- rep(x = 0, times = p) common_trait_loading <- matrix(   data = 1,   nrow = p,   ncol = q )  # state parameters common_state_loading <- matrix(   data = 1,   nrow = p,   ncol = 1 ) phi_0 <- 0.000 phi_1 <- 0.311 psi_s0 <- 1.00 psi_s <- 0.25 theta <- 0.15 * diag(p)  # profile-specific means mu_profile <- cbind(   c(2.253, 1.493, 1.574, 1.117),   c(-0.278, -0.165, -0.199, -0.148) )  # data generation ----------------------------------------------------------- data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,   mu_profile = mu_profile )  # model fitting ------------------------------------------------------------- # NOTE: Model fitting takes time fit <- FitCULTA2Profiles(data = data) AIC(fit) } # }"},{"path":"https://github.com/jeksterslab/manCULTA/reference/BIC.fitculta.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian Information Criterion — BIC.fitculta","title":"Bayesian Information Criterion — BIC.fitculta","text":"Bayesian Information Criterion","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/BIC.fitculta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian Information Criterion — BIC.fitculta","text":"","code":"# S3 method for class 'fitculta' BIC(object, adjust = FALSE, ...)"},{"path":"https://github.com/jeksterslab/manCULTA/reference/BIC.fitculta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian Information Criterion — BIC.fitculta","text":"object Object class fitculta. adjust Logical. adjust = TRUE, return sample size adjusted BIC. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/BIC.fitculta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayesian Information Criterion — BIC.fitculta","text":"Returns Bayesian information criterion (BIC).","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/BIC.fitculta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bayesian Information Criterion — BIC.fitculta","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/BIC.fitculta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayesian Information Criterion — BIC.fitculta","text":"","code":"if (FALSE) { # \\dontrun{ # complete list of R function arguments -------------------------------------  # random seed for reproducibility set.seed(42)  # dimensions n <- 1000 # number of individuals m <- 6 # measurement occasions p <- 4 # number of items q <- 1 # common trait dimension  # covariate parameters mu_x <- 11.4009 sigma_x <- 24.67566  # profile membership and transition parameters nu_0 <- -3.563 kappa_0 <- 0.122 alpha_0 <- -3.586 beta_00 <- 2.250 gamma_00 <- 0.063 gamma_10 <- 0.094  # trait parameters psi_t <- 0.10 * diag(1) mu_t <- 0 psi_p <- diag(p) psi_p_1 <- 0.10 psi_p_2 <- 0.10 psi_p_3 <- 0.50 psi_p_4 <- 0.50 diag(psi_p) <- c(   psi_p_1,   psi_p_2,   psi_p_3,   psi_p_4 ) mu_p <- rep(x = 0, times = p) common_trait_loading <- matrix(   data = 1,   nrow = p,   ncol = q )  # state parameters common_state_loading <- matrix(   data = 1,   nrow = p,   ncol = 1 ) phi_0 <- 0.000 phi_1 <- 0.311 psi_s0 <- 1.00 psi_s <- 0.25 theta <- 0.15 * diag(p)  # profile-specific means mu_profile <- cbind(   c(2.253, 1.493, 1.574, 1.117),   c(-0.278, -0.165, -0.199, -0.148) )  # data generation ----------------------------------------------------------- data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,   mu_profile = mu_profile )  # model fitting ------------------------------------------------------------- # NOTE: Model fitting takes time fit <- FitCULTA2Profiles(data = data) BIC(fit) BIC(fit, adjust = TRUE) } # }"},{"path":"https://github.com/jeksterslab/manCULTA/reference/FitCULTA1Profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit the One-Profile CULTA Model (CUTS Model with AR) — FitCULTA1Profile","title":"Fit the One-Profile CULTA Model (CUTS Model with AR) — FitCULTA1Profile","text":"Fits one-profile CULTA model using Mplus.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/FitCULTA1Profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit the One-Profile CULTA Model (CUTS Model with AR) — FitCULTA1Profile","text":"","code":"FitCULTA1Profile(data, wd = \".\", mplus_bin = NULL, starts = 10)"},{"path":"https://github.com/jeksterslab/manCULTA/reference/FitCULTA1Profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit the One-Profile CULTA Model (CUTS Model with AR) — FitCULTA1Profile","text":"data R object. Object class simculta. wd Character string. Working directory. mplus_bin Character string. Path Mplus binary. mplus_bin = NULL, function try find appropriate binary. starts Positive integer. Number initial stage starting values.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/FitCULTA1Profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit the One-Profile CULTA Model (CUTS Model with AR) — FitCULTA1Profile","text":"Returns object class fitculta. list following elements: call: Function call. fun: Function used (\"FitCULTA1Profile\"). args: Function arguments. output: Mplus output files. elapsed: Elapsed time.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/manCULTA/reference/FitCULTA1Profile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fit the One-Profile CULTA Model (CUTS Model with AR) — FitCULTA1Profile","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/FitCULTA1Profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit the One-Profile CULTA Model (CUTS Model with AR) — FitCULTA1Profile","text":"","code":"if (FALSE) { # \\dontrun{ # complete list of R function arguments -------------------------------------  # random seed for reproducibility set.seed(42)  # dimensions n <- 1000 # number of individuals m <- 6 # measurement occasions p <- 4 # number of items q <- 1 # common trait dimension  # covariate parameters mu_x <- 11.4009 sigma_x <- 24.67566  # profile membership and transition parameters nu_0 <- -3.563 kappa_0 <- 0.122 alpha_0 <- -3.586 beta_00 <- 2.250 gamma_00 <- 0.063 gamma_10 <- 0.094  # trait parameters psi_t <- 0.10 * diag(1) mu_t <- 0 psi_p <- diag(p) psi_p_1 <- 0.10 psi_p_2 <- 0.10 psi_p_3 <- 0.50 psi_p_4 <- 0.50 diag(psi_p) <- c(   psi_p_1,   psi_p_2,   psi_p_3,   psi_p_4 ) mu_p <- rep(x = 0, times = p) common_trait_loading <- matrix(   data = 1,   nrow = p,   ncol = q )  # state parameters common_state_loading <- matrix(   data = 1,   nrow = p,   ncol = 1 ) phi_0 <- 0.000 phi_1 <- 0.311 psi_s0 <- 1.00 psi_s <- 0.25 theta <- 0.15 * diag(p)  # profile-specific means mu_profile <- cbind(   c(2.253, 1.493, 1.574, 1.117),   c(-0.278, -0.165, -0.199, -0.148) )  # data generation ----------------------------------------------------------- data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,   mu_profile = mu_profile )  # model fitting ------------------------------------------------------------- # NOTE: Model fitting takes time FitCULTA1Profile(data = data) } # }"},{"path":"https://github.com/jeksterslab/manCULTA/reference/FitCULTA2Profiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit the Two-Profile CULTA Model — FitCULTA2Profiles","title":"Fit the Two-Profile CULTA Model — FitCULTA2Profiles","text":"Fits two-profile CULTA model using Mplus.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/FitCULTA2Profiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit the Two-Profile CULTA Model — FitCULTA2Profiles","text":"","code":"FitCULTA2Profiles(   data,   wd = \".\",   ncores = 1L,   mplus_bin = NULL,   starts = c(20, 4),   stiterations = 10,   stscale = 5 )"},{"path":"https://github.com/jeksterslab/manCULTA/reference/FitCULTA2Profiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit the Two-Profile CULTA Model — FitCULTA2Profiles","text":"data R object. Object class simculta. wd Character string. Working directory. ncores Positive integer. Number cores use. mplus_bin Character string. Path Mplus binary. mplus_bin = NULL, function try find appropriate binary. starts Vector positive integer length two. Number initial stage starts number final stage optimizations. stiterations Positive integer. Number initial stage iterations. stscale Positive integer. Random start scale.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/FitCULTA2Profiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit the Two-Profile CULTA Model — FitCULTA2Profiles","text":"Returns object class fitculta. list following elements: call: Function call. fun: Function used (\"FitCULTA2Profiles\"). args: Function arguments. output: Mplus output files. elapsed: Elapsed time.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/manCULTA/reference/FitCULTA2Profiles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fit the Two-Profile CULTA Model — FitCULTA2Profiles","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/FitCULTA2Profiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit the Two-Profile CULTA Model — FitCULTA2Profiles","text":"","code":"if (FALSE) { # \\dontrun{ # complete list of R function arguments -------------------------------------  # random seed for reproducibility set.seed(42)  # dimensions n <- 1000 # number of individuals m <- 6 # measurement occasions p <- 4 # number of items q <- 1 # common trait dimension  # covariate parameters mu_x <- 11.4009 sigma_x <- 24.67566  # profile membership and transition parameters nu_0 <- -3.563 kappa_0 <- 0.122 alpha_0 <- -3.586 beta_00 <- 2.250 gamma_00 <- 0.063 gamma_10 <- 0.094  # trait parameters psi_t <- 0.10 * diag(1) mu_t <- 0 psi_p <- diag(p) psi_p_1 <- 0.10 psi_p_2 <- 0.10 psi_p_3 <- 0.50 psi_p_4 <- 0.50 diag(psi_p) <- c(   psi_p_1,   psi_p_2,   psi_p_3,   psi_p_4 ) mu_p <- rep(x = 0, times = p) common_trait_loading <- matrix(   data = 1,   nrow = p,   ncol = q )  # state parameters common_state_loading <- matrix(   data = 1,   nrow = p,   ncol = 1 ) phi_0 <- 0.000 phi_1 <- 0.311 psi_s0 <- 1.00 psi_s <- 0.25 theta <- 0.15 * diag(p)  # profile-specific means mu_profile <- cbind(   c(2.253, 1.493, 1.574, 1.117),   c(-0.278, -0.165, -0.199, -0.148) )  # data generation ----------------------------------------------------------- data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,   mu_profile = mu_profile )  # model fitting ------------------------------------------------------------- # NOTE: Model fitting takes time FitCULTA2Profiles(data = data) } # }"},{"path":"https://github.com/jeksterslab/manCULTA/reference/FitLTA2Profiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit the Two-Profile LTA Model — FitLTA2Profiles","title":"Fit the Two-Profile LTA Model — FitLTA2Profiles","text":"Fits two-profile LTA model using Mplus.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/FitLTA2Profiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit the Two-Profile LTA Model — FitLTA2Profiles","text":"","code":"FitLTA2Profiles(   data,   wd = \".\",   ncores = 1L,   mplus_bin = NULL,   starts = c(20, 4),   stiterations = 10,   stscale = 5 )"},{"path":"https://github.com/jeksterslab/manCULTA/reference/FitLTA2Profiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit the Two-Profile LTA Model — FitLTA2Profiles","text":"data R object. Object class simculta. wd Character string. Working directory. ncores Positive integer. Number cores use. mplus_bin Character string. Path Mplus binary. mplus_bin = NULL, function try find appropriate binary. starts Vector positive integer length two. Number initial stage starts number final stage optimizations. stiterations Positive integer. Number initial stage iterations. stscale Positive integer. Random start scale.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/FitLTA2Profiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit the Two-Profile LTA Model — FitLTA2Profiles","text":"Returns object class fitculta. list following elements: call: Function call. fun: Function used (\"FitLTA2Profiles\"). args: Function arguments. output: Mplus output files. elapsed: Elapsed time.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/manCULTA/reference/FitLTA2Profiles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fit the Two-Profile LTA Model — FitLTA2Profiles","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/FitLTA2Profiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit the Two-Profile LTA Model — FitLTA2Profiles","text":"","code":"if (FALSE) { # \\dontrun{ # complete list of R function arguments -------------------------------------  # random seed for reproducibility set.seed(42)  # dimensions n <- 1000 # number of individuals m <- 6 # measurement occasions p <- 4 # number of items q <- 1 # common trait dimension  # covariate parameters mu_x <- 11.4009 sigma_x <- 24.67566  # profile membership and transition parameters nu_0 <- -3.563 kappa_0 <- 0.122 alpha_0 <- -3.586 beta_00 <- 2.250 gamma_00 <- 0.063 gamma_10 <- 0.094  # trait parameters psi_t <- 0.10 * diag(1) mu_t <- 0 psi_p <- diag(p) psi_p_1 <- 0.10 psi_p_2 <- 0.10 psi_p_3 <- 0.50 psi_p_4 <- 0.50 diag(psi_p) <- c(   psi_p_1,   psi_p_2,   psi_p_3,   psi_p_4 ) mu_p <- rep(x = 0, times = p) common_trait_loading <- matrix(   data = 1,   nrow = p,   ncol = q )  # state parameters common_state_loading <- matrix(   data = 1,   nrow = p,   ncol = 1 ) phi_0 <- 0.000 phi_1 <- 0.311 psi_s0 <- 1.00 psi_s <- 0.25 theta <- 0.15 * diag(p)  # profile-specific means mu_profile <- cbind(   c(2.253, 1.493, 1.574, 1.117),   c(-0.278, -0.165, -0.199, -0.148) )  # data generation ----------------------------------------------------------- data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,   mu_profile = mu_profile )  # model fitting ------------------------------------------------------------- # NOTE: Model fitting takes time FitLTA2Profiles(data = data) } # }"},{"path":"https://github.com/jeksterslab/manCULTA/reference/FitRILTA2Profiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit the Two-Profile RI-LTA Model — FitRILTA2Profiles","title":"Fit the Two-Profile RI-LTA Model — FitRILTA2Profiles","text":"Fits two-profile RI-LTA model using Mplus.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/FitRILTA2Profiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit the Two-Profile RI-LTA Model — FitRILTA2Profiles","text":"","code":"FitRILTA2Profiles(   data,   wd = \".\",   ncores = 1L,   mplus_bin = NULL,   starts = c(20, 4),   stiterations = 10,   stscale = 5 )"},{"path":"https://github.com/jeksterslab/manCULTA/reference/FitRILTA2Profiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit the Two-Profile RI-LTA Model — FitRILTA2Profiles","text":"data R object. Object class simculta. wd Character string. Working directory. ncores Positive integer. Number cores use. mplus_bin Character string. Path Mplus binary. mplus_bin = NULL, function try find appropriate binary. starts Vector positive integer length two. Number initial stage starts number final stage optimizations. stiterations Positive integer. Number initial stage iterations. stscale Positive integer. Random start scale.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/FitRILTA2Profiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit the Two-Profile RI-LTA Model — FitRILTA2Profiles","text":"Returns object class fitculta. list following elements: call: Function call. fun: Function used (\"FitRILTA2Profiles\"). args: Function arguments. output: Mplus output files. elapsed: Elapsed time.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/manCULTA/reference/FitRILTA2Profiles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fit the Two-Profile RI-LTA Model — FitRILTA2Profiles","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/FitRILTA2Profiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit the Two-Profile RI-LTA Model — FitRILTA2Profiles","text":"","code":"if (FALSE) { # \\dontrun{ # complete list of R function arguments -------------------------------------  # random seed for reproducibility set.seed(42)  # dimensions n <- 1000 # number of individuals m <- 6 # measurement occasions p <- 4 # number of items q <- 1 # common trait dimension  # covariate parameters mu_x <- 11.4009 sigma_x <- 24.67566  # profile membership and transition parameters nu_0 <- -3.563 kappa_0 <- 0.122 alpha_0 <- -3.586 beta_00 <- 2.250 gamma_00 <- 0.063 gamma_10 <- 0.094  # trait parameters psi_t <- 0.10 * diag(1) mu_t <- 0 psi_p <- diag(p) psi_p_1 <- 0.10 psi_p_2 <- 0.10 psi_p_3 <- 0.50 psi_p_4 <- 0.50 diag(psi_p) <- c(   psi_p_1,   psi_p_2,   psi_p_3,   psi_p_4 ) mu_p <- rep(x = 0, times = p) common_trait_loading <- matrix(   data = 1,   nrow = p,   ncol = q )  # state parameters common_state_loading <- matrix(   data = 1,   nrow = p,   ncol = 1 ) phi_0 <- 0.000 phi_1 <- 0.311 psi_s0 <- 1.00 psi_s <- 0.25 theta <- 0.15 * diag(p)  # profile-specific means mu_profile <- cbind(   c(2.253, 1.493, 1.574, 1.117),   c(-0.278, -0.165, -0.199, -0.148) )  # data generation ----------------------------------------------------------- data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,   mu_profile = mu_profile )  # model fitting ------------------------------------------------------------- # NOTE: Model fitting takes time FitRILTA2Profiles(data = data) } # }"},{"path":"https://github.com/jeksterslab/manCULTA/reference/GenCULTA2Profiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Observed Data from a Two-Profile CULTA Model — GenCULTA2Profiles","title":"Simulate Observed Data from a Two-Profile CULTA Model — GenCULTA2Profiles","text":"Generates data two-profile longitudinal CULTA model profile membership, trait components, state dynamics influenced observed covariate. function produces simulated responses incorporating covariate effects, individual differences, time-varying fluctuations.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/GenCULTA2Profiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Observed Data from a Two-Profile CULTA Model — GenCULTA2Profiles","text":"","code":"GenCULTA2Profiles(   n,   m,   mu_x,   sigma_x,   nu_0,   kappa_0,   alpha_0,   beta_00,   gamma_00,   gamma_10,   mu_t,   psi_t,   mu_p,   psi_p,   common_trait_loading,   common_state_loading,   phi_0,   phi_1,   psi_s0,   psi_s,   theta,   mu_profile )"},{"path":"https://github.com/jeksterslab/manCULTA/reference/GenCULTA2Profiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Observed Data from a Two-Profile CULTA Model — GenCULTA2Profiles","text":"n Positive integer. Number individuals. m Positive integer. Number measurement occasions. mu_x Numeric. Mean covariate \\(\\mu_X\\). sigma_x Numeric. Variance covariate \\(\\sigma_X\\). nu_0 Numeric. Intercept \\(\\nu_{0}\\) logistic model initial profile membership. kappa_0 Numeric. Covariate effect \\(\\kappa_{0}\\) initial profile membership. alpha_0 Numeric. Intercept \\(\\alpha_{0}\\) logistic model profile transitions across time. beta_00 Numeric. Effect \\(\\beta_{00}\\) self-persistence profile 0 transitions. gamma_00 Numeric. Covariate effect \\(\\gamma_{00}\\) remaining profile 0. gamma_10 Numeric. Covariate effect \\(\\gamma_{10}\\) transitioning profile 1 profile 0. mu_t Numeric vector length \\(q\\). Mean \\(\\mu_t\\) common trait factor. mu_t = NULL, defaults zero. psi_t Numeric matrix size \\(q \\times q\\). Positive definite covariance matrix \\(\\Psi_t\\) common trait factor. mu_p Numeric vector length \\(p\\). Mean vector \\(\\boldsymbol{\\mu}_p\\) unique trait components. mu_p = NULL, defaults zero. psi_p Numeric matrix size \\(p \\times p\\). Positive definite covariance matrix \\(\\Psi_p\\) unique trait components. common_trait_loading Numeric matrix size \\(p \\times q\\). Factor loading matrix specifying influence common trait observed item. common_state_loading Numeric matrix size \\(p \\times 1\\). Factor loading matrix specifying influence common state observed item. phi_0 Numeric. Autoregressive coefficient \\(\\phi_0\\) common state process profile 0. phi_1 Numeric. Autoregressive coefficient \\(\\phi_1\\) common state process profile 0. psi_s0 Numeric. Variance \\(\\psi_{s0}\\) initial common state. psi_s Numeric. Innovation variance \\(\\psi_{s}\\) common state process. theta Numeric matrix size \\(p \\times p\\). Positive definite covariance matrix \\(\\boldsymbol{\\Theta}\\) unique state components. mu_profile Numeric matrix size \\(p \\times 2\\). Profile-specific means observed item across two latent profiles.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/GenCULTA2Profiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Observed Data from a Two-Profile CULTA Model — GenCULTA2Profiles","text":"Returns object class simculta. list following elements: call: Function call. fun: Function used (\"GenCULTA2Profiles\"). args: Function arguments. id: Vector ID numbers. covariate: Vector covariate values. categorical: Latent profiles. common_trait: Common trait. unique_trait: Unique trait. common_state: Common state. trait: Common trait + unique trait. state: Common state + unique state. data: Generated data matrix observed variables generated CULTA model two-profiles.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/GenCULTA2Profiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Observed Data from a Two-Profile CULTA Model — GenCULTA2Profiles","text":"GenCULTA2Profiles() function generates data two-profile CULTA model covariate. CULTA model incorporates covariate, latent categorical variables, trait components, state components, profile-specific means simulate longitudinal data latent profile transitions. Let \\(\\\\left\\{ 1, \\ldots, n \\right\\}\\) denote index individuals, let \\(t \\\\left\\{ 0, \\ldots, m - 1 \\right\\}\\) denote index measurement occasions, let \\(k \\\\left\\{ 1, \\ldots, p \\right\\}\\) denote index items, let \\(c \\\\left\\{ 0, 1 \\right\\}\\) index two latent profiles (profile 0 profile 1). Let \\(q\\) trait dimension, \\(q = 1\\) context. Covariate covariate generated normal distribution mean \\(\\mu_X\\) variance \\(\\sigma_X\\). Latent Categorical Variables Latent categorical variables represent profile membership individual measurement occasion. two-profile model, profile membership influenced covariate previous profile status, following logistic formulation. distinguish : Initial profile membership (baseline time point) Profile transitions across subsequent time points describe components . Initial Profile Membership first measurement occasion (\\(t = 0\\)), profile membership determined following log-odds belonging profile 0 (profile 1 reference category): $$     \\left(         \\begin{array}{cc}             \\nu_{0} + \\kappa_{0} \\times \\mathrm{Covariate} & 0 \\\\         \\end{array}     \\right) . $$ corresponding probability belonging profile given : $$      \\left(        \\begin{array}{cc}            \\frac{              \\exp              \\left(                \\nu_{0} + \\kappa_{0} \\times \\mathrm{Covariate}              \\right)            }{              \\exp              \\left(                \\nu_{0} + \\kappa_{0} \\times \\mathrm{Covariate}              \\right) + 1            }            &            \\frac{1}{              \\exp              \\left(                \\nu_{0} + \\kappa_{0} \\times \\mathrm{Covariate}              \\right) + 1            } \\\\        \\end{array}      \\right) . $$ Profile membership first occasion sampled based probabilities. Profile Transitions subsequent occasions (\\(t = 1, \\ldots, m - 1\\)), profile transitions depend profile previous occasion covariate. log-odds transitioning profile 0 time \\(t\\) given : $$     \\left(         \\begin{array}{cc}             \\alpha_{0} + \\beta_{00} + \\gamma_{00} \\times \\mathrm{Covariate}             & 0 \\\\ \t      \\alpha_{0} + \\gamma_{10} \\times \\mathrm{Covariate} & 0 \\\\         \\end{array}     \\right) . $$ probability transitioning profile computed : $$   \\left(     \\begin{array}{cc}       \\frac{         \\exp         \\left(           \\alpha_{0} + \\beta_{00} + \\gamma_{00}           \\times \\mathrm{Covariate}         \\right)       }{         \\exp         \\left(           \\alpha_{0} + \\beta_{00} + \\gamma_{00}           \\times \\mathrm{Covariate}         \\right) + 1       }       &       \\frac{1}{         \\exp         \\left(           \\alpha_{0} + \\beta_{00} + \\gamma_{00}           \\times \\mathrm{Covariate}         \\right) + 1       } \\\\       \\frac{         \\exp         \\left(           \\alpha_{0} + \\gamma_{10} \\times \\mathrm{Covariate}         \\right)       }{         \\exp         \\left(           \\alpha_{0} + \\gamma_{10} \\times \\mathrm{Covariate}         \\right) + 1       }       &       \\frac{1}{         \\exp         \\left(           \\alpha_{0} + \\gamma_{10} \\times \\mathrm{Covariate}         \\right) + 1       } \\\\     \\end{array}   \\right) . $$ Profile membership subsequent time point sampled using transition probabilities, based individual's covariate value previous profile. Trait Components trait variate captures -person differences composed shared (common) component item-specific (unique) components. full decomposition given : $$     \\mathrm{Trait}_{}     =     \\mathrm{Common\\ Trait\\ Loading}     \\times \\mathrm{Common\\ Trait}_{}     +     \\mathrm{Unique\\ Trait}_{} . $$ describe component . Common Trait common trait \\(\\mathrm{Common\\ Trait}_{}\\) represents shared individual differences influence items uniformly. drawn normal distribution mean \\(\\mu_t\\) variance \\(\\psi_t\\): $$     \\mathrm{Common\\ Trait}_{} \\sim \\mathcal{N} \\left( \\mu_t, \\psi_t \\right) $$ influence common trait item determined \\(p \\times q\\) common trait loading, Unique Traits unique trait component \\(\\mathrm{Unique\\ Trait}_{k, }\\) captures item-specific stable differences drawn multivariate normal distribution: $$     \\mathrm{Unique\\ Trait}_{}     \\sim \\mathcal{N}     \\left( \\boldsymbol{\\mu}_p, \\boldsymbol{\\Psi}_{p \\times p} \\right) $$ Combined Trait Variate trait variate item \\(k\\) individual \\(\\) obtained combining common unique trait components: $$     \\mathrm{Trait}_{k, } = \\mathrm{Common\\ Trait\\ Loading}_{k} \\times     \\mathrm{Common\\ Trait}_{} + \\mathrm{Unique\\ Trait}_{k, } . $$ common trait component introduces shared variance across items, unique trait component allows item-specific differences explained common trait. State Components state variate composed two parts: common state shared across items, unique states specific item. full decomposition given : $$   \\mathrm{State}_{k, , t} = \\mathrm{Common\\ State\\ Loading}_{k} \\times   \\mathrm{Common\\ State}_{, t} + \\mathrm{Unique\\ State}_{k, , t} . $$ describe component . Common State common state \\(\\mathrm{Common\\ State}_{, t}\\) evolves time following first-order autoregressive process: $$   \\mathrm{Common\\ State}_{, t} = \\phi_{c} \\times   \\mathrm{Common\\ State}_{, t - 1} + \\zeta_{, t} . $$ initial common state drawn normal distribution: $$   \\mathrm{Common\\ State}_{, 0} \\sim   \\mathcal{N} \\left( 0, \\psi_{s_{0}} \\right) . $$ innovation term \\(\\zeta_{, t}\\) normally distributed: $$   \\zeta_{, t} \\sim \\mathcal{N} \\left( 0, \\psi_{s} \\right) . $$ autoregressive parameter \\(\\phi_{c}\\) depends latent profile membership \\(c\\): $$    \\phi_{c} = \\phi_{0} + \\left( \\phi_{1} - \\phi_{0} \\right) c . $$ , \\(\\phi_{0}\\) \\(\\phi_{1}\\) represent autoregressive coefficients profiles coded 0 1, respectively. Unique State unique state \\(\\mathrm{Unique\\ State}_{k, , t}\\) captures item-specific deviations drawn multivariate normal distribution: $$   \\mathrm{Unique\\ State}_{, t}   \\sim \\mathcal{N} \\left( 0, \\boldsymbol{\\theta} \\right) $$ \\(\\boldsymbol{\\theta}\\) item-level covariance matrix unique state component. Combined State Variate state variate item \\(k\\), individual \\(\\), time \\(t\\) combines common unique state components: $$   \\mathrm{State}_{k, , t} = \\mathrm{Common\\ State\\ Loading}_{k} \\times   \\mathrm{Common\\ State}_{, t} + \\mathrm{Unique\\ State}_{k, , t} $$ common state loading parameter \\(\\mathrm{Common\\ State\\ Loading}_{k}\\) controls influence shared state item. Observed Variables observed variable given $$   Y_{k, , t} = \\mu_{k, c} + \\mathrm{Trait}_{k, } + \\mathrm{State}_{k, , t} $$ \\(\\mu_{k, c}\\) profile specific mean, \\(\\mathrm{Trait}_{k, }\\) \\(\\mathrm{State}_{k, , t}\\) correspond trait state components model.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/GenCULTA2Profiles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate Observed Data from a Two-Profile CULTA Model — GenCULTA2Profiles","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/GenCULTA2Profiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Observed Data from a Two-Profile CULTA Model — GenCULTA2Profiles","text":"","code":"# complete list of R function arguments -------------------------------------  # random seed for reproducibility set.seed(42)  # dimensions n <- 10 # number of individuals m <- 6 # measurement occasions p <- 4 # number of items q <- 1 # common trait dimension  # covariate parameters mu_x <- 11.4009 sigma_x <- 24.67566  # profile membership and transition parameters nu_0 <- -3.563 kappa_0 <- 0.122 alpha_0 <- -3.586 beta_00 <- 2.250 gamma_00 <- 0.063 gamma_10 <- 0.094  # trait parameters psi_t <- diag(1) mu_t <- 0 psi_p <- diag(p) mu_p <- rep(x = 0, times = p) common_trait_loading <- matrix(   data = 1,   nrow = p,   ncol = q )  # state parameters common_state_loading <- matrix(   data = 1,   nrow = p,   ncol = 1 ) phi_0 <- 0.000 phi_1 <- 0.311 psi_s0 <- 0.151 psi_s <- 0.290 theta <- diag(p)  # profile-specific means mu_profile <- cbind(   c(2.253, 1.493, 1.574, 1.117),   c(-0.278, -0.165, -0.199, -0.148) )  # data generation ----------------------------------------------------------- data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,   mu_profile = mu_profile )"},{"path":"https://github.com/jeksterslab/manCULTA/reference/InputCULTA1Profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Mplus Inout file for the One-Profile CULTA Model (CUTS Model with AR) — InputCULTA1Profile","title":"Generate Mplus Inout file for the One-Profile CULTA Model (CUTS Model with AR) — InputCULTA1Profile","text":"Generates Mplus input file one-profile CULTA model.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/InputCULTA1Profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Mplus Inout file for the One-Profile CULTA Model (CUTS Model with AR) — InputCULTA1Profile","text":"","code":"InputCULTA1Profile(data, wd = \".\", starts = 10)"},{"path":"https://github.com/jeksterslab/manCULTA/reference/InputCULTA1Profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Mplus Inout file for the One-Profile CULTA Model (CUTS Model with AR) — InputCULTA1Profile","text":"data R object. Object class simculta. wd Character string. Working directory. starts Positive integer. Number initial stage starting values.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/InputCULTA1Profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Mplus Inout file for the One-Profile CULTA Model (CUTS Model with AR) — InputCULTA1Profile","text":"Writes data input files wd.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/manCULTA/reference/InputCULTA1Profile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate Mplus Inout file for the One-Profile CULTA Model (CUTS Model with AR) — InputCULTA1Profile","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/InputCULTA1Profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Mplus Inout file for the One-Profile CULTA Model (CUTS Model with AR) — InputCULTA1Profile","text":"","code":"if (FALSE) { # \\dontrun{ # complete list of R function arguments -------------------------------------  # random seed for reproducibility set.seed(42)  # dimensions n <- 1000 # number of individuals m <- 6 # measurement occasions p <- 4 # number of items q <- 1 # common trait dimension  # covariate parameters mu_x <- 11.4009 sigma_x <- 24.67566  # profile membership and transition parameters nu_0 <- -3.563 kappa_0 <- 0.122 alpha_0 <- -3.586 beta_00 <- 2.250 gamma_00 <- 0.063 gamma_10 <- 0.094  # trait parameters psi_t <- 0.10 * diag(1) mu_t <- 0 psi_p <- diag(p) psi_p_1 <- 0.10 psi_p_2 <- 0.10 psi_p_3 <- 0.50 psi_p_4 <- 0.50 diag(psi_p) <- c(   psi_p_1,   psi_p_2,   psi_p_3,   psi_p_4 ) mu_p <- rep(x = 0, times = p) common_trait_loading <- matrix(   data = 1,   nrow = p,   ncol = q )  # state parameters common_state_loading <- matrix(   data = 1,   nrow = p,   ncol = 1 ) phi_0 <- 0.000 phi_1 <- 0.311 psi_s0 <- 1.00 psi_s <- 0.25 theta <- 0.15 * diag(p)  # profile-specific means mu_profile <- cbind(   c(2.253, 1.493, 1.574, 1.117),   c(-0.278, -0.165, -0.199, -0.148) )  # data generation ----------------------------------------------------------- data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,   mu_profile = mu_profile )  # generate data and Mplus input files fitting ------------------------------- InputCULTA1Profile(data = data) } # }"},{"path":"https://github.com/jeksterslab/manCULTA/reference/InputCULTA2Profiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Mplus Input file for the Two-Profile CULTA Model — InputCULTA2Profiles","title":"Generate Mplus Input file for the Two-Profile CULTA Model — InputCULTA2Profiles","text":"Generates Mplus input file two-profile CULTA model.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/InputCULTA2Profiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Mplus Input file for the Two-Profile CULTA Model — InputCULTA2Profiles","text":"","code":"InputCULTA2Profiles(   data,   wd = \".\",   ncores = 1L,   starts = c(20, 4),   stiterations = 10,   stscale = 5 )"},{"path":"https://github.com/jeksterslab/manCULTA/reference/InputCULTA2Profiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Mplus Input file for the Two-Profile CULTA Model — InputCULTA2Profiles","text":"data R object. Object class simculta. wd Character string. Working directory. ncores Positive integer. Number cores use. starts Vector positive integer length two. Number initial stage starts number final stage optimizations. stiterations Positive integer. Number initial stage iterations. stscale Positive integer. Random start scale.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/InputCULTA2Profiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Mplus Input file for the Two-Profile CULTA Model — InputCULTA2Profiles","text":"Writes data input files wd.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/manCULTA/reference/InputCULTA2Profiles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate Mplus Input file for the Two-Profile CULTA Model — InputCULTA2Profiles","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/InputCULTA2Profiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Mplus Input file for the Two-Profile CULTA Model — InputCULTA2Profiles","text":"","code":"if (FALSE) { # \\dontrun{ # complete list of R function arguments -------------------------------------  # random seed for reproducibility set.seed(42)  # dimensions n <- 1000 # number of individuals m <- 6 # measurement occasions p <- 4 # number of items q <- 1 # common trait dimension  # covariate parameters mu_x <- 11.4009 sigma_x <- 24.67566  # profile membership and transition parameters nu_0 <- -3.563 kappa_0 <- 0.122 alpha_0 <- -3.586 beta_00 <- 2.250 gamma_00 <- 0.063 gamma_10 <- 0.094  # trait parameters psi_t <- 0.10 * diag(1) mu_t <- 0 psi_p <- diag(p) psi_p_1 <- 0.10 psi_p_2 <- 0.10 psi_p_3 <- 0.50 psi_p_4 <- 0.50 diag(psi_p) <- c(   psi_p_1,   psi_p_2,   psi_p_3,   psi_p_4 ) mu_p <- rep(x = 0, times = p) common_trait_loading <- matrix(   data = 1,   nrow = p,   ncol = q )  # state parameters common_state_loading <- matrix(   data = 1,   nrow = p,   ncol = 1 ) phi_0 <- 0.000 phi_1 <- 0.311 psi_s0 <- 1.00 psi_s <- 0.25 theta <- 0.15 * diag(p)  # profile-specific means mu_profile <- cbind(   c(2.253, 1.493, 1.574, 1.117),   c(-0.278, -0.165, -0.199, -0.148) )  # data generation ----------------------------------------------------------- data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,   mu_profile = mu_profile )  # generate data and Mplus input files fitting ------------------------------- InputCULTA2Profiles(data = data) } # }"},{"path":"https://github.com/jeksterslab/manCULTA/reference/InputLTA2Profiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Mplus Input file for the Two-Profile LTA Model — InputLTA2Profiles","title":"Generate Mplus Input file for the Two-Profile LTA Model — InputLTA2Profiles","text":"Generates Mplus input file two-profile LTA model.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/InputLTA2Profiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Mplus Input file for the Two-Profile LTA Model — InputLTA2Profiles","text":"","code":"InputLTA2Profiles(   data,   wd = \".\",   ncores = 1L,   starts = c(20, 4),   stiterations = 10,   stscale = 5 )"},{"path":"https://github.com/jeksterslab/manCULTA/reference/InputLTA2Profiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Mplus Input file for the Two-Profile LTA Model — InputLTA2Profiles","text":"data R object. Object class simculta. wd Character string. Working directory. ncores Positive integer. Number cores use. starts Vector positive integer length two. Number initial stage starts number final stage optimizations. stiterations Positive integer. Number initial stage iterations. stscale Positive integer. Random start scale.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/InputLTA2Profiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Mplus Input file for the Two-Profile LTA Model — InputLTA2Profiles","text":"Writes data input files wd.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/manCULTA/reference/InputLTA2Profiles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate Mplus Input file for the Two-Profile LTA Model — InputLTA2Profiles","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/InputLTA2Profiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Mplus Input file for the Two-Profile LTA Model — InputLTA2Profiles","text":"","code":"if (FALSE) { # \\dontrun{ # complete list of R function arguments -------------------------------------  # random seed for reproducibility set.seed(42)  # dimensions n <- 1000 # number of individuals m <- 6 # measurement occasions p <- 4 # number of items q <- 1 # common trait dimension  # covariate parameters mu_x <- 11.4009 sigma_x <- 24.67566  # profile membership and transition parameters nu_0 <- -3.563 kappa_0 <- 0.122 alpha_0 <- -3.586 beta_00 <- 2.250 gamma_00 <- 0.063 gamma_10 <- 0.094  # trait parameters psi_t <- 0.10 * diag(1) mu_t <- 0 psi_p <- diag(p) psi_p_1 <- 0.10 psi_p_2 <- 0.10 psi_p_3 <- 0.50 psi_p_4 <- 0.50 diag(psi_p) <- c(   psi_p_1,   psi_p_2,   psi_p_3,   psi_p_4 ) mu_p <- rep(x = 0, times = p) common_trait_loading <- matrix(   data = 1,   nrow = p,   ncol = q )  # state parameters common_state_loading <- matrix(   data = 1,   nrow = p,   ncol = 1 ) phi_0 <- 0.000 phi_1 <- 0.311 psi_s0 <- 1.00 psi_s <- 0.25 theta <- 0.15 * diag(p)  # profile-specific means mu_profile <- cbind(   c(2.253, 1.493, 1.574, 1.117),   c(-0.278, -0.165, -0.199, -0.148) )  # data generation ----------------------------------------------------------- data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,   mu_profile = mu_profile )  # generate data and Mplus input files fitting ------------------------------- InputLTA2Profiles(data = data) } # }"},{"path":"https://github.com/jeksterslab/manCULTA/reference/InputRILTA2Profiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Mplus Input file for the Two-Profile RI-LTA Model — InputRILTA2Profiles","title":"Generate Mplus Input file for the Two-Profile RI-LTA Model — InputRILTA2Profiles","text":"Generates Mplus input file two-profile RI-LTA model.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/InputRILTA2Profiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Mplus Input file for the Two-Profile RI-LTA Model — InputRILTA2Profiles","text":"","code":"InputRILTA2Profiles(   data,   wd = \".\",   ncores = 1L,   starts = c(20, 4),   stiterations = 10,   stscale = 5 )"},{"path":"https://github.com/jeksterslab/manCULTA/reference/InputRILTA2Profiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Mplus Input file for the Two-Profile RI-LTA Model — InputRILTA2Profiles","text":"data R object. Object class simculta. wd Character string. Working directory. ncores Positive integer. Number cores use. starts Vector positive integer length two. Number initial stage starts number final stage optimizations. stiterations Positive integer. Number initial stage iterations. stscale Positive integer. Random start scale.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/InputRILTA2Profiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Mplus Input file for the Two-Profile RI-LTA Model — InputRILTA2Profiles","text":"Writes data input files wd.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/manCULTA/reference/InputRILTA2Profiles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate Mplus Input file for the Two-Profile RI-LTA Model — InputRILTA2Profiles","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/InputRILTA2Profiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Mplus Input file for the Two-Profile RI-LTA Model — InputRILTA2Profiles","text":"","code":"if (FALSE) { # \\dontrun{ # complete list of R function arguments -------------------------------------  # random seed for reproducibility set.seed(42)  # dimensions n <- 1000 # number of individuals m <- 6 # measurement occasions p <- 4 # number of items q <- 1 # common trait dimension  # covariate parameters mu_x <- 11.4009 sigma_x <- 24.67566  # profile membership and transition parameters nu_0 <- -3.563 kappa_0 <- 0.122 alpha_0 <- -3.586 beta_00 <- 2.250 gamma_00 <- 0.063 gamma_10 <- 0.094  # trait parameters psi_t <- 0.10 * diag(1) mu_t <- 0 psi_p <- diag(p) psi_p_1 <- 0.10 psi_p_2 <- 0.10 psi_p_3 <- 0.50 psi_p_4 <- 0.50 diag(psi_p) <- c(   psi_p_1,   psi_p_2,   psi_p_3,   psi_p_4 ) mu_p <- rep(x = 0, times = p) common_trait_loading <- matrix(   data = 1,   nrow = p,   ncol = q )  # state parameters common_state_loading <- matrix(   data = 1,   nrow = p,   ncol = 1 ) phi_0 <- 0.000 phi_1 <- 0.311 psi_s0 <- 1.00 psi_s <- 0.25 theta <- 0.15 * diag(p)  # profile-specific means mu_profile <- cbind(   c(2.253, 1.493, 1.574, 1.117),   c(-0.278, -0.165, -0.199, -0.148) )  # data generation ----------------------------------------------------------- data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,   mu_profile = mu_profile )  # generate data and Mplus input files fitting ------------------------------- InputRILTA2Profiles(data = data) } # }"},{"path":"https://github.com/jeksterslab/manCULTA/reference/WriteData.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Data to File — WriteData","title":"Write Data to File — WriteData","text":"Generic function write data file.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/WriteData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Data to File — WriteData","text":"","code":"WriteData(x, file, ...)  # S3 method for class 'simculta' WriteData(x, file, ...)"},{"path":"https://github.com/jeksterslab/manCULTA/reference/WriteData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Data to File — WriteData","text":"x Object class simculta. file Character string. File name. ... Additional arguments.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/WriteData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Data to File — WriteData","text":"Invisibly returns NULL. Writes data file side effect.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/WriteData.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Write Data to File — WriteData","text":"WriteData(simculta): Method objects class simculta.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/WriteData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write Data to File — WriteData","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/anova.fitculta.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Two Nested fitculta Models Using Scaled Chi-Square Difference Test — anova.fitculta","title":"Compare Two Nested fitculta Models Using Scaled Chi-Square Difference Test — anova.fitculta","text":"function compares two fitculta models using Satorra-Bentler scaled chi-square difference test based log-likelihoods, number free parameters, scaling correction factors. also returns model fit indices models, including AIC, BIC, adjusted BIC, entropy.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/anova.fitculta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Two Nested fitculta Models Using Scaled Chi-Square Difference Test — anova.fitculta","text":"","code":"# S3 method for class 'fitculta' anova(object, other, ...)"},{"path":"https://github.com/jeksterslab/manCULTA/reference/anova.fitculta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Two Nested fitculta Models Using Scaled Chi-Square Difference Test — anova.fitculta","text":"object Model object class fitculta. Another model object class fitculta. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/anova.fitculta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Two Nested fitculta Models Using Scaled Chi-Square Difference Test — anova.fitculta","text":"list two elements: fit matrix summarizing model fit indices models, including: logLik, df (number free parameters), correction (scaling factor), AIC, BIC, aBIC (adjusted BIC), entropy. diff named numeric vector scaled chi-square difference, degrees freedom difference, p-value.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/anova.fitculta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Two Nested fitculta Models Using Scaled Chi-Square Difference Test — anova.fitculta","text":"","code":"if (FALSE) { # \\dontrun{ # complete list of R function arguments -------------------------------------  # random seed for reproducibility set.seed(42)  # dimensions n <- 1000 # number of individuals m <- 6 # measurement occasions p <- 4 # number of items q <- 1 # common trait dimension  # covariate parameters mu_x <- 11.4009 sigma_x <- 24.67566  # profile membership and transition parameters nu_0 <- -3.563 kappa_0 <- 0.122 alpha_0 <- -3.586 beta_00 <- 2.250 gamma_00 <- 0.063 gamma_10 <- 0.094  # trait parameters psi_t <- 0.10 * diag(1) mu_t <- 0 psi_p <- diag(p) psi_p_1 <- 0.10 psi_p_2 <- 0.10 psi_p_3 <- 0.50 psi_p_4 <- 0.50 diag(psi_p) <- c(   psi_p_1,   psi_p_2,   psi_p_3,   psi_p_4 ) mu_p <- rep(x = 0, times = p) common_trait_loading <- matrix(   data = 1,   nrow = p,   ncol = q )  # state parameters common_state_loading <- matrix(   data = 1,   nrow = p,   ncol = 1 ) phi_0 <- 0.000 phi_1 <- 0.311 psi_s0 <- 1.00 psi_s <- 0.25 theta <- 0.15 * diag(p)  # profile-specific means mu_profile <- cbind(   c(2.253, 1.493, 1.574, 1.117),   c(-0.278, -0.165, -0.199, -0.148) )  # data generation ----------------------------------------------------------- data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,   mu_profile = mu_profile )  # model fitting ------------------------------------------------------------- # NOTE: Model fitting takes time one_profile <- FitCULTA1Profile(data = data) two_profiles <- FitCULTA2Profiles(data = data) anova(one_profile, two_profiles) } # }"},{"path":"https://github.com/jeksterslab/manCULTA/reference/as.data.frame.simculta.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an Object of Class simculta to a Data Frame — as.data.frame.simculta","title":"Coerce an Object of Class simculta to a Data Frame — as.data.frame.simculta","text":"Coerce Object Class simculta Data Frame","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/as.data.frame.simculta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an Object of Class simculta to a Data Frame — as.data.frame.simculta","text":"","code":"# S3 method for class 'simculta' as.data.frame(x, ...)"},{"path":"https://github.com/jeksterslab/manCULTA/reference/as.data.frame.simculta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an Object of Class simculta to a Data Frame — as.data.frame.simculta","text":"x Object class simculta. ... Additional arguments.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/as.data.frame.simculta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coerce an Object of Class simculta to a Data Frame — as.data.frame.simculta","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/as.data.frame.simculta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an Object of Class simculta to a Data Frame — as.data.frame.simculta","text":"","code":"x <- GenCULTA2Profiles(   n = 10,   m = 6,   common_trait_loading = matrix(     data = c(1, 1.25, 1.50, 1.75),     ncol = 1   ),   common_state_loading = matrix(     data = c(1, 1.5, 1.75, 2.00),     ncol = 1   ),   mu_t = NULL,   psi_t = NULL,   mu_p = NULL,   psi_p = NULL,   theta = diag(4),   mu_profile = cbind(     c(-3, -3, -3, -3),     c(3, 3, 3, 3)   ),   mu_x = 0,   sigma_x = 1,   nu_0 = -3.563,   kappa_0 = 0.122,   alpha_0 = -3.586,   beta_00 = 2.250,   gamma_00 = 0.063,   gamma_10 = 0.094,   phi_0 = 0.311,   phi_1 = 0,   psi_s0 = 0.151,   psi_s = 0.290 ) as.data.frame(x) #>    id   covariate      y1t0     y2t0      y3t0       y4t0       y1t1     y2t1 #> 1   1 -0.05788734 5.5586108 4.015409 4.8071006  4.4820997  3.3488802 0.764708 #> 2   2  0.48236947 2.0215636 3.070005 2.1049165 -2.7850668  0.9772593 2.510284 #> 3   3  0.99294364 1.3037647 3.321640 1.4157185  2.0901442 -0.2278127 4.816720 #> 4   4 -1.24639550 0.6134074 2.033937 0.4115373 -1.5233829  1.5612930 3.375865 #> 5   5 -0.03348752 1.8860911 3.783625 4.7466582  3.9078727  3.8195600 2.155750 #> 6   6 -0.07096218 2.7039843 1.850319 1.0970003 -0.6784618  1.9165575 3.991854 #> 7   7 -0.75892065 3.6785650 3.973106 4.9584789  4.8689740  1.4758460 4.059789 #> 8   8 -1.03435936 3.4897155 4.715623 0.2789321  4.3518521  3.9216108 2.833675 #> 9   9 -0.63073195 4.0687524 2.778493 2.6382359  3.6560427  5.7206406 1.246627 #> 10 10  0.58680772 0.8762377 2.592222 3.5173125  5.2557097  3.2282111 1.409625 #>         y3t1          y4t1        y1t2      y2t2       y3t2       y4t2 #> 1  3.2176211  3.1228094771  3.68708162 3.6624330  5.3469261  3.8077072 #> 2  2.0397073 -0.7634759375  1.94784303 1.1031107  2.3692209 -4.2720781 #> 3  1.7584798  2.3211517173 -0.11585323 2.3422468  1.4097085  3.5489662 #> 4  3.6867485 -0.8057827984  0.05430914 1.2606708  0.6998451 -0.5398667 #> 5  2.7454002  4.6403705138  5.52849153 5.5563751  6.0189471  6.3926502 #> 6  3.1266704  1.8386089959  1.36995274 0.6800256  2.2480258 -1.7645419 #> 7  3.1036400  2.7413830032  4.50554804 5.7032839  4.5790373  5.9187316 #> 8  0.4824264  0.0002365731  4.59983665 4.6573894 -0.5586842  3.0691371 #> 9  3.6659849  1.9484396349  4.37019908 1.6968734  2.8650687 -0.1621605 #> 10 2.9555879  3.5332211353  2.97357757 2.0905770  1.7684167  3.5536691 #>         y1t3      y2t3      y3t3       y4t3      y1t4      y2t4       y3t4 #> 1  3.6305037 2.8777504 3.1181619  3.1103786  4.482147 3.3478626  3.7672389 #> 2  1.4842027 2.5274600 5.3132418 -1.2047034  2.311866 0.8845128  3.0944010 #> 3  0.0794906 4.2323747 0.4909875  2.9996484 -0.427624 2.3119721 -2.5677444 #> 4  1.6816458 2.4159691 3.6239146  1.8704750 -1.340042 1.6044595  2.6365820 #> 5  3.3166050 1.8331067 4.2341816  2.0370051  3.409822 3.9350173  3.7235348 #> 6  1.3399947 1.8678224 3.4911126 -1.5826918  1.413342 1.6891299  0.5433248 #> 7  3.0641576 3.4059414 3.5210034  4.9922222  4.289931 5.6630787  4.7003826 #> 8  5.5093757 3.4140741 3.0066723  2.0787009  4.484684 4.1776158  1.8014695 #> 9  2.8859008 0.9954588 3.3837934  0.7397054  4.057643 2.2076692  2.1132591 #> 10 5.5191044 4.0339255 2.3105899  3.6790048  2.501198 5.1153146  3.1940027 #>          y4t4       y1t5     y2t5       y3t5       y4t5 #> 1   5.9622371  4.3622596 2.205020  1.7748956 2.07404394 #> 2  -2.1983096  2.2143933 4.433160  5.8345936 1.51033647 #> 3  -0.6651571  0.3083751 3.753993  0.8472692 1.52210683 #> 4  -2.3444524 -0.2828603 1.857651  1.3447812 0.02520816 #> 5   3.7509303  4.0586701 1.673024  2.4320729 3.53000955 #> 6  -2.4594718  1.1081651 2.514302  3.2423761 0.09296968 #> 7   5.2049353  2.3931431 4.824177  4.7840672 5.54305879 #> 8   2.3653249  5.6682881 4.497550 -0.1351435 1.82779548 #> 9  -1.4275159  4.3498987 3.864494  2.5115426 0.64152713 #> 10  5.4159502  0.6198721 2.734512  2.9141825 3.13509945"},{"path":"https://github.com/jeksterslab/manCULTA/reference/as.matrix.simculta.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an Object of Class simculta to a Matrix — as.matrix.simculta","title":"Coerce an Object of Class simculta to a Matrix — as.matrix.simculta","text":"Coerce Object Class simculta Matrix","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/as.matrix.simculta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an Object of Class simculta to a Matrix — as.matrix.simculta","text":"","code":"# S3 method for class 'simculta' as.matrix(x, ...)"},{"path":"https://github.com/jeksterslab/manCULTA/reference/as.matrix.simculta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an Object of Class simculta to a Matrix — as.matrix.simculta","text":"x Object class simculta. ... Additional arguments.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/as.matrix.simculta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coerce an Object of Class simculta to a Matrix — as.matrix.simculta","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/as.matrix.simculta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an Object of Class simculta to a Matrix — as.matrix.simculta","text":"","code":"x <- GenCULTA2Profiles(   n = 10,   m = 6,   common_trait_loading = matrix(     data = c(1, 1.25, 1.50, 1.75),     ncol = 1   ),   common_state_loading = matrix(     data = c(1, 1.5, 1.75, 2.00),     ncol = 1   ),   mu_t = NULL,   psi_t = NULL,   mu_p = NULL,   psi_p = NULL,   theta = diag(4),   mu_profile = cbind(     c(-3, -3, -3, -3),     c(3, 3, 3, 3)   ),   mu_x = 0,   sigma_x = 1,   nu_0 = -3.563,   kappa_0 = 0.122,   alpha_0 = -3.586,   beta_00 = 2.250,   gamma_00 = 0.063,   gamma_10 = 0.094,   phi_0 = 0.311,   phi_1 = 0,   psi_s0 = 0.151,   psi_s = 0.290 ) as.matrix(x) #>    id   covariate      y1t0      y2t0       y3t0        y4t0       y1t1 #> 1   1  0.96298228  5.169668  4.274674  6.2343811  7.10176919  4.5795000 #> 2   2  0.05357102 -3.179332 -3.078806 -1.9896289 -1.09144570 -4.0662783 #> 3   3 -0.43489841  1.741236  3.664483  0.9649907 -0.06289595 -0.0227294 #> 4   4 -1.73729726  4.843360  3.480369  1.4274894  3.36510490  5.6259881 #> 5   5 -1.26369560  3.782242  1.351715  2.9427369  1.79492136  4.1703608 #> 6   6  0.40630851  2.153713  2.448050  6.4307622  0.82026921  0.9993397 #> 7   7 -1.45965397  3.187589  4.987633  6.4153168  6.54650864  4.8089617 #> 8   8  1.04845737  3.108124  3.289756  6.9083992  5.16560453  4.9094513 #> 9   9 -1.34643054  2.499432  3.046025  0.4712187 -2.38458438  2.7194779 #> 10 10 -0.19357056  0.299359  4.619669  3.4303420  5.35578262  0.6633495 #>          y2t1      y3t1        y4t1      y1t2     y2t2       y3t2       y4t2 #> 1   6.7192306  6.045733  5.15785621 5.3308925 4.480549  6.2758984  5.3035594 #> 2  -3.2791562 -2.302476 -1.52292783 2.4955208 3.238228  5.9966701  5.7236904 #> 3   2.0769196  0.374529 -0.01985354 2.1532250 1.685218  0.2291469  1.1929425 #> 4   4.6009064  4.667957  4.78767319 4.2175993 3.995034  3.0083666  2.2328544 #> 5   1.4074369  1.257834  0.37680413 4.2422077 2.968707  3.5152542  4.5464480 #> 6   4.4365377  4.991256  1.82479659 0.8520359 1.668367  3.8500824 -0.1251810 #> 7   3.8389022  6.213358  5.41862987 2.7582569 3.718020  3.3514878  2.2179556 #> 8   0.5089100  2.108597  4.03151989 5.7788110 3.245956  4.8326252  6.6788243 #> 9   2.5678902 -1.697736  0.77904779 2.5939581 0.540211 -1.2891760 -0.8636479 #> 10  0.6898624  2.618613  0.89160197 2.0970055 3.870696  6.5278311  6.8438020 #>          y1t3       y2t3       y3t3       y4t3      y1t4       y2t4       y3t4 #> 1   4.9647455  4.9061314  5.1533464  3.9193757  5.209965  5.0213801  4.7511168 #> 2   2.7038780  1.1295392  4.6699030  3.7237263  3.863576  2.3339723  2.6999287 #> 3   1.5673056  3.4527936 -1.2532654 -0.1382367 -0.551350  1.0349972 -0.8588542 #> 4  -0.5632622 -0.7069522 -2.7720036 -2.8605303  4.520011  2.5073466  5.2868830 #> 5   4.9475164  1.4066976  1.9458753  1.9402478  3.175947  3.2296663  2.6507675 #> 6   1.3846041  2.0482936  4.1800220  0.4175228  2.406961  1.9072895  3.5058954 #> 7   2.9162976  2.7762897  3.3360606  1.6816822 -1.981660 -0.9395829 -3.3575108 #> 8   3.2281550  0.2785083  5.2362433  4.2728986  1.520190 -0.1393181  3.1058483 #> 9   4.6803712  3.9607754  0.9578368 -1.6505130  3.436325  2.5882202 -1.3595748 #> 10  3.0067244  2.0715573  2.8240631  4.8080380  1.587663  5.7102471  4.9006622 #>          y4t4        y1t5       y2t5      y3t5       y4t5 #> 1   4.2689087  5.76586175  3.5013596  6.056141  5.1135383 #> 2   4.4653561  3.42174181  6.1022666  7.359658  4.4224276 #> 3  -0.9814545 -0.92780702  0.4312681 -2.461801  0.6940986 #> 4   4.6154452  5.77366092  2.6343353  1.759367  1.3968721 #> 5   1.8074246  7.45950081  3.8540892  3.922531  3.6224112 #> 6  -1.4059765  0.02402742  1.8011077  1.785963 -0.2510378 #> 7  -3.1744468 -1.36209878 -0.4938788 -2.126168 -3.1035824 #> 8   4.4357440  4.93773433  0.6300293  1.902562  4.1126967 #> 9  -2.1919886  3.40122956  3.6019252  2.174662  0.4517419 #> 10  4.7603321  0.90799663  2.4760406  2.523084  3.0801351"},{"path":"https://github.com/jeksterslab/manCULTA/reference/coef.fitculta.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter Estimates — coef.fitculta","title":"Parameter Estimates — coef.fitculta","text":"Parameter Estimates","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/coef.fitculta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter Estimates — coef.fitculta","text":"","code":"# S3 method for class 'fitculta' coef(object, ...)"},{"path":"https://github.com/jeksterslab/manCULTA/reference/coef.fitculta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter Estimates — coef.fitculta","text":"object Object class fitculta. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/coef.fitculta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameter Estimates — coef.fitculta","text":"Returns vector parameter estimates.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/coef.fitculta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parameter Estimates — coef.fitculta","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/coef.fitculta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameter Estimates — coef.fitculta","text":"","code":"if (FALSE) { # \\dontrun{ # complete list of R function arguments -------------------------------------  # random seed for reproducibility set.seed(42)  # dimensions n <- 1000 # number of individuals m <- 6 # measurement occasions p <- 4 # number of items q <- 1 # common trait dimension  # covariate parameters mu_x <- 11.4009 sigma_x <- 24.67566  # profile membership and transition parameters nu_0 <- -3.563 kappa_0 <- 0.122 alpha_0 <- -3.586 beta_00 <- 2.250 gamma_00 <- 0.063 gamma_10 <- 0.094  # trait parameters psi_t <- 0.10 * diag(1) mu_t <- 0 psi_p <- diag(p) psi_p_1 <- 0.10 psi_p_2 <- 0.10 psi_p_3 <- 0.50 psi_p_4 <- 0.50 diag(psi_p) <- c(   psi_p_1,   psi_p_2,   psi_p_3,   psi_p_4 ) mu_p <- rep(x = 0, times = p) common_trait_loading <- matrix(   data = 1,   nrow = p,   ncol = q )  # state parameters common_state_loading <- matrix(   data = 1,   nrow = p,   ncol = 1 ) phi_0 <- 0.000 phi_1 <- 0.311 psi_s0 <- 1.00 psi_s <- 0.25 theta <- 0.15 * diag(p)  # profile-specific means mu_profile <- cbind(   c(2.253, 1.493, 1.574, 1.117),   c(-0.278, -0.165, -0.199, -0.148) )  # data generation ----------------------------------------------------------- data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,   mu_profile = mu_profile )  # model fitting ------------------------------------------------------------- # NOTE: Model fitting takes time fit <- FitCULTA2Profiles(data = data) coef(fit) } # }"},{"path":"https://github.com/jeksterslab/manCULTA/reference/confint.fitculta.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Intervals for Parameter Estimates — confint.fitculta","title":"Confidence Intervals for Parameter Estimates — confint.fitculta","text":"Confidence Intervals Parameter Estimates","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/confint.fitculta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Intervals for Parameter Estimates — confint.fitculta","text":"","code":"# S3 method for class 'fitculta' confint(object, parm = NULL, level = 0.95, ...)"},{"path":"https://github.com/jeksterslab/manCULTA/reference/confint.fitculta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Intervals for Parameter Estimates — confint.fitculta","text":"object Object class fitculta. parm specification parameters given confidence intervals, either vector numbers vector names. missing, parameters considered. level confidence level required. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/confint.fitculta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Intervals for Parameter Estimates — confint.fitculta","text":"Returns matrix confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/confint.fitculta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Confidence Intervals for Parameter Estimates — confint.fitculta","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/confint.fitculta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Intervals for Parameter Estimates — confint.fitculta","text":"","code":"if (FALSE) { # \\dontrun{ # complete list of R function arguments -------------------------------------  # random seed for reproducibility set.seed(42)  # dimensions n <- 1000 # number of individuals m <- 6 # measurement occasions p <- 4 # number of items q <- 1 # common trait dimension  # covariate parameters mu_x <- 11.4009 sigma_x <- 24.67566  # profile membership and transition parameters nu_0 <- -3.563 kappa_0 <- 0.122 alpha_0 <- -3.586 beta_00 <- 2.250 gamma_00 <- 0.063 gamma_10 <- 0.094  # trait parameters psi_t <- 0.10 * diag(1) mu_t <- 0 psi_p <- diag(p) psi_p_1 <- 0.10 psi_p_2 <- 0.10 psi_p_3 <- 0.50 psi_p_4 <- 0.50 diag(psi_p) <- c(   psi_p_1,   psi_p_2,   psi_p_3,   psi_p_4 ) mu_p <- rep(x = 0, times = p) common_trait_loading <- matrix(   data = 1,   nrow = p,   ncol = q )  # state parameters common_state_loading <- matrix(   data = 1,   nrow = p,   ncol = 1 ) phi_0 <- 0.000 phi_1 <- 0.311 psi_s0 <- 1.00 psi_s <- 0.25 theta <- 0.15 * diag(p)  # profile-specific means mu_profile <- cbind(   c(2.253, 1.493, 1.574, 1.117),   c(-0.278, -0.165, -0.199, -0.148) )  # data generation ----------------------------------------------------------- data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,   mu_profile = mu_profile )  # model fitting ------------------------------------------------------------- # NOTE: Model fitting takes time fit <- FitCULTA2Profiles(data = data) confint(fit, level = 0.95) } # }"},{"path":"https://github.com/jeksterslab/manCULTA/reference/converged.fitculta.html","id":null,"dir":"Reference","previous_headings":"","what":"Convergence Status of a Model Fit — converged.fitculta","title":"Convergence Status of a Model Fit — converged.fitculta","text":"Checks whether model fitting procedure object class fitculta successfully converged based presence string \"BEST LOGLIKELIHOOD VALUE REPLICATED.\" Mplus output.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/converged.fitculta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convergence Status of a Model Fit — converged.fitculta","text":"","code":"# S3 method for class 'fitculta' converged(object, ...)"},{"path":"https://github.com/jeksterslab/manCULTA/reference/converged.fitculta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convergence Status of a Model Fit — converged.fitculta","text":"object Object class fitculta. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/converged.fitculta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convergence Status of a Model Fit — converged.fitculta","text":"Logical. TRUE model converged, FALSE otherwise.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/converged.fitculta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convergence Status of a Model Fit — converged.fitculta","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/converged.fitculta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convergence Status of a Model Fit — converged.fitculta","text":"","code":"if (FALSE) { # \\dontrun{ # complete list of R function arguments -------------------------------------  # random seed for reproducibility set.seed(42)  # dimensions n <- 1000 # number of individuals m <- 6 # measurement occasions p <- 4 # number of items q <- 1 # common trait dimension  # covariate parameters mu_x <- 11.4009 sigma_x <- 24.67566  # profile membership and transition parameters nu_0 <- -3.563 kappa_0 <- 0.122 alpha_0 <- -3.586 beta_00 <- 2.250 gamma_00 <- 0.063 gamma_10 <- 0.094  # trait parameters psi_t <- 0.10 * diag(1) mu_t <- 0 psi_p <- diag(p) psi_p_1 <- 0.10 psi_p_2 <- 0.10 psi_p_3 <- 0.50 psi_p_4 <- 0.50 diag(psi_p) <- c(   psi_p_1,   psi_p_2,   psi_p_3,   psi_p_4 ) mu_p <- rep(x = 0, times = p) common_trait_loading <- matrix(   data = 1,   nrow = p,   ncol = q )  # state parameters common_state_loading <- matrix(   data = 1,   nrow = p,   ncol = 1 ) phi_0 <- 0.000 phi_1 <- 0.311 psi_s0 <- 1.00 psi_s <- 0.25 theta <- 0.15 * diag(p)  # profile-specific means mu_profile <- cbind(   c(2.253, 1.493, 1.574, 1.117),   c(-0.278, -0.165, -0.199, -0.148) )  # data generation ----------------------------------------------------------- data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,   mu_profile = mu_profile )  # model fitting ------------------------------------------------------------- # NOTE: Model fitting takes time fit <- FitCULTA2Profiles(data = data) converged(fit) } # }"},{"path":"https://github.com/jeksterslab/manCULTA/reference/converged.html","id":null,"dir":"Reference","previous_headings":"","what":"Convergence Status of a Model Fit — converged","title":"Convergence Status of a Model Fit — converged","text":"Checks whether model fitting procedure object class fitculta successfully converged based presence string \"BEST LOGLIKELIHOOD VALUE REPLICATED.\" Mplus output.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/converged.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convergence Status of a Model Fit — converged","text":"","code":"converged(object, ...)"},{"path":"https://github.com/jeksterslab/manCULTA/reference/converged.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convergence Status of a Model Fit — converged","text":"object Object class fitculta. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/converged.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convergence Status of a Model Fit — converged","text":"Logical. TRUE model converged, FALSE otherwise.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/converged.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convergence Status of a Model Fit — converged","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/converged.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convergence Status of a Model Fit — converged","text":"","code":"if (FALSE) { # \\dontrun{ # complete list of R function arguments -------------------------------------  # random seed for reproducibility set.seed(42)  # dimensions n <- 1000 # number of individuals m <- 6 # measurement occasions p <- 4 # number of items q <- 1 # common trait dimension  # covariate parameters mu_x <- 11.4009 sigma_x <- 24.67566  # profile membership and transition parameters nu_0 <- -3.563 kappa_0 <- 0.122 alpha_0 <- -3.586 beta_00 <- 2.250 gamma_00 <- 0.063 gamma_10 <- 0.094  # trait parameters psi_t <- 0.10 * diag(1) mu_t <- 0 psi_p <- diag(p) psi_p_1 <- 0.10 psi_p_2 <- 0.10 psi_p_3 <- 0.50 psi_p_4 <- 0.50 diag(psi_p) <- c(   psi_p_1,   psi_p_2,   psi_p_3,   psi_p_4 ) mu_p <- rep(x = 0, times = p) common_trait_loading <- matrix(   data = 1,   nrow = p,   ncol = q )  # state parameters common_state_loading <- matrix(   data = 1,   nrow = p,   ncol = 1 ) phi_0 <- 0.000 phi_1 <- 0.311 psi_s0 <- 1.00 psi_s <- 0.25 theta <- 0.15 * diag(p)  # profile-specific means mu_profile <- cbind(   c(2.253, 1.493, 1.574, 1.117),   c(-0.278, -0.165, -0.199, -0.148) )  # data generation ----------------------------------------------------------- data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,   mu_profile = mu_profile )  # model fitting ------------------------------------------------------------- # NOTE: Model fitting takes time fit <- FitCULTA2Profiles(data = data) converged(fit) } # }"},{"path":"https://github.com/jeksterslab/manCULTA/reference/entropy.fitculta.html","id":null,"dir":"Reference","previous_headings":"","what":"Entropy — entropy.fitculta","title":"Entropy — entropy.fitculta","text":"Entropy","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/entropy.fitculta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Entropy — entropy.fitculta","text":"","code":"# S3 method for class 'fitculta' entropy(object, ...)"},{"path":"https://github.com/jeksterslab/manCULTA/reference/entropy.fitculta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Entropy — entropy.fitculta","text":"object Object class fitculta. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/entropy.fitculta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Entropy — entropy.fitculta","text":"Returns Akaike's information criterion (AIC).","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/entropy.fitculta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Entropy — entropy.fitculta","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/entropy.fitculta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Entropy — entropy.fitculta","text":"","code":"if (FALSE) { # \\dontrun{ # complete list of R function arguments -------------------------------------  # random seed for reproducibility set.seed(42)  # dimensions n <- 1000 # number of individuals m <- 6 # measurement occasions p <- 4 # number of items q <- 1 # common trait dimension  # covariate parameters mu_x <- 11.4009 sigma_x <- 24.67566  # profile membership and transition parameters nu_0 <- -3.563 kappa_0 <- 0.122 alpha_0 <- -3.586 beta_00 <- 2.250 gamma_00 <- 0.063 gamma_10 <- 0.094  # trait parameters psi_t <- 0.10 * diag(1) mu_t <- 0 psi_p <- diag(p) psi_p_1 <- 0.10 psi_p_2 <- 0.10 psi_p_3 <- 0.50 psi_p_4 <- 0.50 diag(psi_p) <- c(   psi_p_1,   psi_p_2,   psi_p_3,   psi_p_4 ) mu_p <- rep(x = 0, times = p) common_trait_loading <- matrix(   data = 1,   nrow = p,   ncol = q )  # state parameters common_state_loading <- matrix(   data = 1,   nrow = p,   ncol = 1 ) phi_0 <- 0.000 phi_1 <- 0.311 psi_s0 <- 1.00 psi_s <- 0.25 theta <- 0.15 * diag(p)  # profile-specific means mu_profile <- cbind(   c(2.253, 1.493, 1.574, 1.117),   c(-0.278, -0.165, -0.199, -0.148) )  # data generation ----------------------------------------------------------- data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,   mu_profile = mu_profile )  # model fitting ------------------------------------------------------------- # NOTE: Model fitting takes time fit <- FitCULTA2Profiles(data = data) entropy(fit) } # }"},{"path":"https://github.com/jeksterslab/manCULTA/reference/entropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Entropy — entropy","title":"Entropy — entropy","text":"Entropy","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/entropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Entropy — entropy","text":"","code":"entropy(object, ...)"},{"path":"https://github.com/jeksterslab/manCULTA/reference/entropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Entropy — entropy","text":"object Object class fitculta. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/entropy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Entropy — entropy","text":"Returns Akaike's information criterion (AIC).","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/entropy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Entropy — entropy","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/entropy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Entropy — entropy","text":"","code":"if (FALSE) { # \\dontrun{ # complete list of R function arguments -------------------------------------  # random seed for reproducibility set.seed(42)  # dimensions n <- 1000 # number of individuals m <- 6 # measurement occasions p <- 4 # number of items q <- 1 # common trait dimension  # covariate parameters mu_x <- 11.4009 sigma_x <- 24.67566  # profile membership and transition parameters nu_0 <- -3.563 kappa_0 <- 0.122 alpha_0 <- -3.586 beta_00 <- 2.250 gamma_00 <- 0.063 gamma_10 <- 0.094  # trait parameters psi_t <- 0.10 * diag(1) mu_t <- 0 psi_p <- diag(p) psi_p_1 <- 0.10 psi_p_2 <- 0.10 psi_p_3 <- 0.50 psi_p_4 <- 0.50 diag(psi_p) <- c(   psi_p_1,   psi_p_2,   psi_p_3,   psi_p_4 ) mu_p <- rep(x = 0, times = p) common_trait_loading <- matrix(   data = 1,   nrow = p,   ncol = q )  # state parameters common_state_loading <- matrix(   data = 1,   nrow = p,   ncol = 1 ) phi_0 <- 0.000 phi_1 <- 0.311 psi_s0 <- 1.00 psi_s <- 0.25 theta <- 0.15 * diag(p)  # profile-specific means mu_profile <- cbind(   c(2.253, 1.493, 1.574, 1.117),   c(-0.278, -0.165, -0.199, -0.148) )  # data generation ----------------------------------------------------------- data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,   mu_profile = mu_profile )  # model fitting ------------------------------------------------------------- # NOTE: Model fitting takes time fit <- FitCULTA2Profiles(data = data) entropy(fit) } # }"},{"path":"https://github.com/jeksterslab/manCULTA/reference/logLik.fitculta.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Log-Likelihood — logLik.fitculta","title":"Extract Log-Likelihood — logLik.fitculta","text":"Extract Log-Likelihood","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/logLik.fitculta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Log-Likelihood — logLik.fitculta","text":"","code":"# S3 method for class 'fitculta' logLik(object, ...)"},{"path":"https://github.com/jeksterslab/manCULTA/reference/logLik.fitculta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Log-Likelihood — logLik.fitculta","text":"object Object class fitculta. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/logLik.fitculta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Log-Likelihood — logLik.fitculta","text":"Returns object class logLik. number attribute, \"df\" (degrees freedom), giving number (estimated) parameters model, \"correction\" scaling correction factor MLR.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/logLik.fitculta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract Log-Likelihood — logLik.fitculta","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/logLik.fitculta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Log-Likelihood — logLik.fitculta","text":"","code":"if (FALSE) { # \\dontrun{ # complete list of R function arguments -------------------------------------  # random seed for reproducibility set.seed(42)  # dimensions n <- 1000 # number of individuals m <- 6 # measurement occasions p <- 4 # number of items q <- 1 # common trait dimension  # covariate parameters mu_x <- 11.4009 sigma_x <- 24.67566  # profile membership and transition parameters nu_0 <- -3.563 kappa_0 <- 0.122 alpha_0 <- -3.586 beta_00 <- 2.250 gamma_00 <- 0.063 gamma_10 <- 0.094  # trait parameters psi_t <- 0.10 * diag(1) mu_t <- 0 psi_p <- diag(p) psi_p_1 <- 0.10 psi_p_2 <- 0.10 psi_p_3 <- 0.50 psi_p_4 <- 0.50 diag(psi_p) <- c(   psi_p_1,   psi_p_2,   psi_p_3,   psi_p_4 ) mu_p <- rep(x = 0, times = p) common_trait_loading <- matrix(   data = 1,   nrow = p,   ncol = q )  # state parameters common_state_loading <- matrix(   data = 1,   nrow = p,   ncol = 1 ) phi_0 <- 0.000 phi_1 <- 0.311 psi_s0 <- 1.00 psi_s <- 0.25 theta <- 0.15 * diag(p)  # profile-specific means mu_profile <- cbind(   c(2.253, 1.493, 1.574, 1.117),   c(-0.278, -0.165, -0.199, -0.148) )  # data generation ----------------------------------------------------------- data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,   mu_profile = mu_profile )  # model fitting ------------------------------------------------------------- # NOTE: Model fitting takes time fit <- FitCULTA2Profiles(data = data) logLik(fit, level = 0.95) } # }"},{"path":"https://github.com/jeksterslab/manCULTA/reference/manCULTA-package.html","id":null,"dir":"Reference","previous_headings":"","what":"manCULTA: Common and Unique Latent Transition Analysis (CULTA) as a Way to Examine the Trait-State Dynamics of Alcohol Intoxication — manCULTA-package","title":"manCULTA: Common and Unique Latent Transition Analysis (CULTA) as a Way to Examine the Trait-State Dynamics of Alcohol Intoxication — manCULTA-package","text":"Research compendium manuscript Pesigan, . J. ., Russell, M. ., Chow, S.-M. (Review). Common Unique Latent Transition Analysis (CULTA) Way Examine Trait-State Dynamics Alcohol Intoxication. doi:10.0000/0000000000 .","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/manCULTA/reference/manCULTA-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"manCULTA: Common and Unique Latent Transition Analysis (CULTA) as a Way to Examine the Trait-State Dynamics of Alcohol Intoxication — manCULTA-package","text":"Maintainer: Ivan Jacob Agaloos Pesigan r.jeksterslab@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/print.fitculta.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for an Object of Class fitculta — print.fitculta","title":"Print Method for an Object of Class fitculta — print.fitculta","text":"Print Method Object Class fitculta","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/print.fitculta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for an Object of Class fitculta — print.fitculta","text":"","code":"# S3 method for class 'fitculta' print(x, alpha = NULL, digits = 4, ...)"},{"path":"https://github.com/jeksterslab/manCULTA/reference/print.fitculta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for an Object of Class fitculta — print.fitculta","text":"x Object class fitculta. alpha Numeric vector. Significance level \\(\\alpha\\). alpha = NULL, use alpha = 0.05. digits Digits print. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/print.fitculta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for an Object of Class fitculta — print.fitculta","text":"Prints matrix standardized regression slopes, standard errors, test statistics, p-values, confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/print.fitculta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Method for an Object of Class fitculta — print.fitculta","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/print.fitculta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for an Object of Class fitculta — print.fitculta","text":"","code":"if (FALSE) { # \\dontrun{ # complete list of R function arguments -------------------------------------  # random seed for reproducibility set.seed(42)  # dimensions n <- 1000 # number of individuals m <- 6 # measurement occasions p <- 4 # number of items q <- 1 # common trait dimension  # covariate parameters mu_x <- 11.4009 sigma_x <- 24.67566  # profile membership and transition parameters nu_0 <- -3.563 kappa_0 <- 0.122 alpha_0 <- -3.586 beta_00 <- 2.250 gamma_00 <- 0.063 gamma_10 <- 0.094  # trait parameters psi_t <- 0.10 * diag(1) mu_t <- 0 psi_p <- diag(p) psi_p_1 <- 0.10 psi_p_2 <- 0.10 psi_p_3 <- 0.50 psi_p_4 <- 0.50 diag(psi_p) <- c(   psi_p_1,   psi_p_2,   psi_p_3,   psi_p_4 ) mu_p <- rep(x = 0, times = p) common_trait_loading <- matrix(   data = 1,   nrow = p,   ncol = q )  # state parameters common_state_loading <- matrix(   data = 1,   nrow = p,   ncol = 1 ) phi_0 <- 0.000 phi_1 <- 0.311 psi_s0 <- 1.00 psi_s <- 0.25 theta <- 0.15 * diag(p)  # profile-specific means mu_profile <- cbind(   c(2.253, 1.493, 1.574, 1.117),   c(-0.278, -0.165, -0.199, -0.148) )  # data generation ----------------------------------------------------------- data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,   mu_profile = mu_profile )  # model fitting ------------------------------------------------------------- # NOTE: Model fitting takes time fit <- FitCULTA2Profiles(data = data) print(fit) } # }"},{"path":"https://github.com/jeksterslab/manCULTA/reference/print.simculta.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for an Object of Class simculta — print.simculta","title":"Print Method for an Object of Class simculta — print.simculta","text":"Print Method Object Class simculta","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/print.simculta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for an Object of Class simculta — print.simculta","text":"","code":"# S3 method for class 'simculta' print(x, ...)"},{"path":"https://github.com/jeksterslab/manCULTA/reference/print.simculta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for an Object of Class simculta — print.simculta","text":"x Object class simculta. ... Additional arguments.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/print.simculta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Method for an Object of Class simculta — print.simculta","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/print.simculta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for an Object of Class simculta — print.simculta","text":"","code":"x <- GenCULTA2Profiles(   n = 10,   m = 6,   common_trait_loading = matrix(     data = c(1, 1.25, 1.50, 1.75),     ncol = 1   ),   common_state_loading = matrix(     data = c(1, 1.5, 1.75, 2.00),     ncol = 1   ),   mu_t = NULL,   psi_t = NULL,   mu_p = NULL,   psi_p = NULL,   theta = diag(4),   mu_profile = cbind(     c(-3, -3, -3, -3),     c(3, 3, 3, 3)   ),   mu_x = 0,   sigma_x = 1,   nu_0 = -3.563,   kappa_0 = 0.122,   alpha_0 = -3.586,   beta_00 = 2.250,   gamma_00 = 0.063,   gamma_10 = 0.094,   phi_0 = 0.311,   phi_1 = 0,   psi_s0 = 0.151,   psi_s = 0.290 ) print(x) #> Call: #> GenCULTA2Profiles(n = 10, m = 6, mu_x = 0, sigma_x = 1, nu_0 = -3.563,  #>     kappa_0 = 0.122, alpha_0 = -3.586, beta_00 = 2.25, gamma_00 = 0.063,  #>     gamma_10 = 0.094, mu_t = NULL, psi_t = NULL, mu_p = NULL,  #>     psi_p = NULL, common_trait_loading = matrix(data = c(1, 1.25,  #>         1.5, 1.75), ncol = 1), common_state_loading = matrix(data = c(1,  #>         1.5, 1.75, 2), ncol = 1), phi_0 = 0.311, phi_1 = 0, psi_s0 = 0.151,  #>     psi_s = 0.29, theta = diag(4), mu_profile = cbind(c(-3, -3,  #>         -3, -3), c(3, 3, 3, 3))) #> Use `as.data.frame` or `as.matrix` on the output of `GenCULTA2Profiles` #> to convert it to a data frame or a matrix. #>"},{"path":"https://github.com/jeksterslab/manCULTA/reference/summary.fitculta.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for an Object of Class fitculta — summary.fitculta","title":"Summary Method for an Object of Class fitculta — summary.fitculta","text":"Summary Method Object Class fitculta","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/summary.fitculta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for an Object of Class fitculta — summary.fitculta","text":"","code":"# S3 method for class 'fitculta' summary(object, alpha = NULL, digits = 4, ...)"},{"path":"https://github.com/jeksterslab/manCULTA/reference/summary.fitculta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for an Object of Class fitculta — summary.fitculta","text":"object Object class fitculta. alpha Numeric vector. Significance level \\(\\alpha\\). alpha = NULL, use alpha = 0.05. digits Digits print. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/summary.fitculta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for an Object of Class fitculta — summary.fitculta","text":"Returns matrix standardized regression slopes, standard errors, test statistics, p-values, confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/summary.fitculta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary Method for an Object of Class fitculta — summary.fitculta","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/summary.fitculta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Method for an Object of Class fitculta — summary.fitculta","text":"","code":"if (FALSE) { # \\dontrun{ # complete list of R function arguments -------------------------------------  # random seed for reproducibility set.seed(42)  # dimensions n <- 1000 # number of individuals m <- 6 # measurement occasions p <- 4 # number of items q <- 1 # common trait dimension  # covariate parameters mu_x <- 11.4009 sigma_x <- 24.67566  # profile membership and transition parameters nu_0 <- -3.563 kappa_0 <- 0.122 alpha_0 <- -3.586 beta_00 <- 2.250 gamma_00 <- 0.063 gamma_10 <- 0.094  # trait parameters psi_t <- 0.10 * diag(1) mu_t <- 0 psi_p <- diag(p) psi_p_1 <- 0.10 psi_p_2 <- 0.10 psi_p_3 <- 0.50 psi_p_4 <- 0.50 diag(psi_p) <- c(   psi_p_1,   psi_p_2,   psi_p_3,   psi_p_4 ) mu_p <- rep(x = 0, times = p) common_trait_loading <- matrix(   data = 1,   nrow = p,   ncol = q )  # state parameters common_state_loading <- matrix(   data = 1,   nrow = p,   ncol = 1 ) phi_0 <- 0.000 phi_1 <- 0.311 psi_s0 <- 1.00 psi_s <- 0.25 theta <- 0.15 * diag(p)  # profile-specific means mu_profile <- cbind(   c(2.253, 1.493, 1.574, 1.117),   c(-0.278, -0.165, -0.199, -0.148) )  # data generation ----------------------------------------------------------- data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,   mu_profile = mu_profile )  # model fitting ------------------------------------------------------------- # NOTE: Model fitting takes time fit <- FitCULTA2Profiles(data = data) summary(fit) } # }"},{"path":"https://github.com/jeksterslab/manCULTA/reference/vcov.fitculta.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling Covariance Matrix — vcov.fitculta","title":"Sampling Covariance Matrix — vcov.fitculta","text":"Sampling Covariance Matrix","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/vcov.fitculta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling Covariance Matrix — vcov.fitculta","text":"","code":"# S3 method for class 'fitculta' vcov(object, ...)"},{"path":"https://github.com/jeksterslab/manCULTA/reference/vcov.fitculta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampling Covariance Matrix — vcov.fitculta","text":"object Object class fitculta. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/vcov.fitculta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sampling Covariance Matrix — vcov.fitculta","text":"Returns matrix variance-covariance matrix parameter estimates.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/vcov.fitculta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sampling Covariance Matrix — vcov.fitculta","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/manCULTA/reference/vcov.fitculta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sampling Covariance Matrix — vcov.fitculta","text":"","code":"if (FALSE) { # \\dontrun{ # complete list of R function arguments -------------------------------------  # random seed for reproducibility set.seed(42)  # dimensions n <- 1000 # number of individuals m <- 6 # measurement occasions p <- 4 # number of items q <- 1 # common trait dimension  # covariate parameters mu_x <- 11.4009 sigma_x <- 24.67566  # profile membership and transition parameters nu_0 <- -3.563 kappa_0 <- 0.122 alpha_0 <- -3.586 beta_00 <- 2.250 gamma_00 <- 0.063 gamma_10 <- 0.094  # trait parameters psi_t <- 0.10 * diag(1) mu_t <- 0 psi_p <- diag(p) psi_p_1 <- 0.10 psi_p_2 <- 0.10 psi_p_3 <- 0.50 psi_p_4 <- 0.50 diag(psi_p) <- c(   psi_p_1,   psi_p_2,   psi_p_3,   psi_p_4 ) mu_p <- rep(x = 0, times = p) common_trait_loading <- matrix(   data = 1,   nrow = p,   ncol = q )  # state parameters common_state_loading <- matrix(   data = 1,   nrow = p,   ncol = 1 ) phi_0 <- 0.000 phi_1 <- 0.311 psi_s0 <- 1.00 psi_s <- 0.25 theta <- 0.15 * diag(p)  # profile-specific means mu_profile <- cbind(   c(2.253, 1.493, 1.574, 1.117),   c(-0.278, -0.165, -0.199, -0.148) )  # data generation ----------------------------------------------------------- data <- GenCULTA2Profiles(   n = n,   m = m,   mu_x = mu_x,   sigma_x = sigma_x,   nu_0 = nu_0,   kappa_0 = kappa_0,   alpha_0 = alpha_0,   beta_00 = beta_00,   gamma_00 = gamma_00,   gamma_10 = gamma_10,   mu_t = mu_t,   psi_t = psi_t,   mu_p = mu_p,   psi_p = psi_p,   common_trait_loading = common_trait_loading,   common_state_loading = common_state_loading,   phi_0 = phi_0,   phi_1 = phi_1,   psi_s0 = psi_s0,   psi_s = psi_s,   theta = theta,   mu_profile = mu_profile )  # model fitting ------------------------------------------------------------- # NOTE: Model fitting takes time fit <- FitCULTA2Profiles(data = data) vcov(fit) } # }"},{"path":"https://github.com/jeksterslab/manCULTA/news/index.html","id":"manculta-092","dir":"Changelog","previous_headings":"","what":"manCULTA 0.9.2","title":"manCULTA 0.9.2","text":"Added functions Monte Carlo simulation.","code":""},{"path":"https://github.com/jeksterslab/manCULTA/news/index.html","id":"manculta-091","dir":"Changelog","previous_headings":"","what":"manCULTA 0.9.1","title":"manCULTA 0.9.1","text":"Initial setup","code":""}]
