// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// CommonState2Profiles
arma::mat CommonState2Profiles(const arma::imat& categorical, double beta_0, double beta_1, double psi_s0, double psi_s);
RcppExport SEXP _manCULTA_CommonState2Profiles(SEXP categoricalSEXP, SEXP beta_0SEXP, SEXP beta_1SEXP, SEXP psi_s0SEXP, SEXP psi_sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type categorical(categoricalSEXP);
    Rcpp::traits::input_parameter< double >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< double >::type beta_1(beta_1SEXP);
    Rcpp::traits::input_parameter< double >::type psi_s0(psi_s0SEXP);
    Rcpp::traits::input_parameter< double >::type psi_s(psi_sSEXP);
    rcpp_result_gen = Rcpp::wrap(CommonState2Profiles(categorical, beta_0, beta_1, psi_s0, psi_s));
    return rcpp_result_gen;
END_RCPP
}
// RandMultiNormMean
arma::mat RandMultiNormMean(const int n, const arma::vec& mu, const arma::mat& sigma);
RcppExport SEXP _manCULTA_RandMultiNormMean(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(RandMultiNormMean(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// RandMultiNorm
arma::mat RandMultiNorm(const int n, const arma::mat& sigma);
RcppExport SEXP _manCULTA_RandMultiNorm(SEXP nSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(RandMultiNorm(n, sigma));
    return rcpp_result_gen;
END_RCPP
}
// State
arma::mat State(const arma::mat& common_state, const arma::mat& common_state_loading, const arma::mat& theta);
RcppExport SEXP _manCULTA_State(SEXP common_stateSEXP, SEXP common_state_loadingSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type common_state(common_stateSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type common_state_loading(common_state_loadingSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(State(common_state, common_state_loading, theta));
    return rcpp_result_gen;
END_RCPP
}
// TraitMean
arma::mat TraitMean(const arma::mat& common_trait, const arma::mat& unique_trait, const arma::mat& common_trait_loading, const arma::vec& grand_mean);
RcppExport SEXP _manCULTA_TraitMean(SEXP common_traitSEXP, SEXP unique_traitSEXP, SEXP common_trait_loadingSEXP, SEXP grand_meanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type common_trait(common_traitSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type unique_trait(unique_traitSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type common_trait_loading(common_trait_loadingSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type grand_mean(grand_meanSEXP);
    rcpp_result_gen = Rcpp::wrap(TraitMean(common_trait, unique_trait, common_trait_loading, grand_mean));
    return rcpp_result_gen;
END_RCPP
}
// TraitState2Profiles
arma::mat TraitState2Profiles(const arma::mat& mu_profile, const arma::mat& trait, const arma::mat& state, const arma::imat& categorical);
RcppExport SEXP _manCULTA_TraitState2Profiles(SEXP mu_profileSEXP, SEXP traitSEXP, SEXP stateSEXP, SEXP categoricalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mu_profile(mu_profileSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type trait(traitSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type state(stateSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type categorical(categoricalSEXP);
    rcpp_result_gen = Rcpp::wrap(TraitState2Profiles(mu_profile, trait, state, categorical));
    return rcpp_result_gen;
END_RCPP
}
// Trait
arma::mat Trait(const arma::mat& common_trait, const arma::mat& unique_trait, const arma::mat& common_trait_loading);
RcppExport SEXP _manCULTA_Trait(SEXP common_traitSEXP, SEXP unique_traitSEXP, SEXP common_trait_loadingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type common_trait(common_traitSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type unique_trait(unique_traitSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type common_trait_loading(common_trait_loadingSEXP);
    rcpp_result_gen = Rcpp::wrap(Trait(common_trait, unique_trait, common_trait_loading));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_manCULTA_CommonState2Profiles", (DL_FUNC) &_manCULTA_CommonState2Profiles, 5},
    {"_manCULTA_RandMultiNormMean", (DL_FUNC) &_manCULTA_RandMultiNormMean, 3},
    {"_manCULTA_RandMultiNorm", (DL_FUNC) &_manCULTA_RandMultiNorm, 2},
    {"_manCULTA_State", (DL_FUNC) &_manCULTA_State, 3},
    {"_manCULTA_TraitMean", (DL_FUNC) &_manCULTA_TraitMean, 4},
    {"_manCULTA_TraitState2Profiles", (DL_FUNC) &_manCULTA_TraitState2Profiles, 4},
    {"_manCULTA_Trait", (DL_FUNC) &_manCULTA_Trait, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_manCULTA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
